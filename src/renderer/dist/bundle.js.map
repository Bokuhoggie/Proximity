{"version":3,"file":"bundle.js","mappings":";;;;;;;;;;;;;;AAAA;AACO;AACP;AACA;AACA;AACA;AACA,kCAAkC;AAClC;AACA;AACA;AACA;AACA;AACA,cAAc,sCAAsC;AACpD,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uDAAuD,6BAA6B;AACpF;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uEAAuE,OAAO;AAC9E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uDAAuD,6BAA6B;AACpF;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uEAAuE,KAAK;AAC5E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd,mEAAmE,8BAA8B;AACjG;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,iBAAiB;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;AC1VA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;AChDA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;ACtEA;AACO;AACP;AACA;AACA;AACA;AACA,gCAAgC,cAAc;AAC9C;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA;AACA,gCAAgC;AAChC,gCAAgC;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC;AAClC;AACA,oCAAoC;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,mBAAmB;AAC7D;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,wBAAwB;AAChD;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,yBAAyB;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,wBAAwB;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,UAAU;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6DAA6D,cAAciBAAiB;AACjB;AACA,SAAS;AACT;AACA;;;;;;;;;;;;;;AChgBA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;ACzEA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC;AAClC;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,wBAAwB;AACtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;AC7HA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,2DAA2D,SAAS;AACpE,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,0EAA0E,UAAU;AACpF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD,OAAO;AAC1D,oBAAoB;AACpB;AACA;AACA;AACA;AACA,wCAAwC,OAAO;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD,gBAAgB;AACnE;AACA;AACA;AACA,uCAAuC,UAAU;AACjD;AACA,yCAAyC,UAAU;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mEAAmE,OAAO;AAC1E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mEAAmE,UAAU;AAC7E;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,gEAAgE,UAAU;AAC1E;AACA,aAAa;AACb,UAAU;AACV;AACA;AACA;AACA;AACA;AACA,qCAAqC,KAAK,KAAK,QAAQ;AACvD;AACA;AACA,iDAAiD,KAAK;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;UCzbA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;;;;;;;ACNA;AACgE;AAClB;AACS;AACI;AACD;AACN;AACY;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,yEAAiB;AACtD,6BAA6B,uDAAS;AACtC,gCAAgC,gEAAY;AAC5C,mCAAmC,yEAAe;AAClD,iCAAiC,mEAAa;AAC9C,+BAA+B,6DAAW;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,oEAAY;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,+CAA+C,eAAe;AAC9D;AACA,SAAS;AACT;AACA;AACA;AACA,+CAA+C,eAAe;AAC9D;AACA,SAAS;AACT;AACA;AACA,8BAA8B,aAAa;AAC3C,+BAA+B,cAAc;AAC7C,sCAAsC,iBAAiB;AACvD;AACA;AACA;AACA;AACA;AACA,wCAAwC,cAAc;AACtD;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,mCAAmC;AACnC,oCAAoC;AACpaAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;AACA,C","sources":["webpack://proximity/./src/renderer/js/audio/AudioManager.js","webpack://proximity/./src/renderer/js/chat/ChatManager.js","webpack://proximity/./src/renderer/js/core/ConnectionManager.js","webpack://proximity/./src/renderer/js/proximity/ProximityMap.js","webpack://proximity/./src/renderer/js/server/ServerManager.js","webpack://proximity/./src/renderer/js/settings/SettingsManager.js","webpack://proximity/./src/renderer/js/ui/UIManager.js","webpack://proximity/webpack/bootstrap","webpack://proximity/webpack/runtime/define property getters","webpack://proximity/webpack/runtime/hasOwnProperty shorthand","webpack://proximity/webpack/runtime/make namespace object","webpack://proximity/./src/renderer/js/app.js"],"sourcesContent":["// src/renderer/js/audio/AudioManager.js - Fixed version with missing methods\r\nexport class AudioManager {\r\n    constructor() {\r\n        this.peerConnections = new Map();\r\n        this.localStream = null;\r\n        this.isMuted = false;\r\n        this.initialized = false; // Add this flag\r\n        this.audioContext = null;\r\n        this.micSource = null;\r\n        this.gainNode = null;\r\n        \r\n        this.iceServers = [\r\n            { urls: 'stun:stun.l.google.com:19302' },\r\n            { urls: 'stun:stun1.l.google.com:19302' }\r\n        ];\r\n    }\r\n\r\n    async initialize() {\r\n        try {\r\n            console.log('Initializing audio...');\r\n            \r\n            const constraints = {\r\n                audio: {\r\n                    echoCancellation: true,\r\n                    noiseSuppression: true,\r\n                    autoGainControl: true\r\n                },\r\n                video: false\r\n            };\r\n\r\n            this.localStream = await navigator.mediaDevices.getUserMedia(constraints);\r\n            \r\n            // Setup audio context for gain control\r\n            this.audioContext = new (window.AudioContext || window.webkitAudioContext)();\r\n            this.gainNode = this.audioContext.createGain();\r\n            this.gainNode.gain.value = 1.0;\r\n            \r\n            this.micSource = this.audioContext.createMediaStreamSource(this.localStream);\r\n            this.micSource.connect(this.gainNode);\r\n            \r\n            this.initialized = true;\r\n            console.log('Audio initialized successfully');\r\n            \r\n        } catch (error) {\r\n            console.error('Failed to initialize audio:', error);\r\n            throw new Error('Failed to access microphone: ' + error.message);\r\n        }\r\n    }\r\n\r\n    // Add the missing isInitialized method\r\n    isInitialized() {\r\n        return this.initialized;\r\n    }\r\n\r\n    async connectToUser(userId, username, userColor) {\r\n        if (this.peerConnections.has(userId)) {\r\n            console.log('Already connected to user:', userId);\r\n            return;\r\n        }\r\n\r\n        console.log('Connecting to user:', userId, username);\r\n        \r\n        const peerConnection = new RTCPeerConnection({ iceServers: this.iceServers });\r\n        this.peerConnections.set(userId, peerConnection);\r\n\r\n        // Add local stream\r\n        if (this.localStream) {\r\n            this.localStream.getTracks().forEach(track => {\r\n                peerConnection.addTrack(track, this.localStream);\r\n            });\r\n        }\r\n\r\n        // Handle incoming stream\r\n        peerConnection.ontrack = (event) => {\r\n            console.log('Received remote stream from:', userId);\r\n            const remoteStream = event.streams[0];\r\n            \r\n            // Create audio element\r\n            const audioElement = document.createElement('audio');\r\n            audioElement.autoplay = true;\r\n            audioElement.srcObject = remoteStream;\r\n            audioElement.volume = 1;\r\n            audioElement.style.display = 'none';\r\n            \r\n            // Add to participant\r\n            const participant = document.getElementById(`participant-${userId}`);\r\n            if (participant) {\r\n                participant.appendChild(audioElement);\r\n            }\r\n            \r\n            // Notify app about the audio element for proximity calculations\r\n            if (window.proximityApp && window.proximityApp.proximityMap) {\r\n                window.proximityApp.proximityMap.setUserAudioElement(userId, audioElement);\r\n            }\r\n        };\r\n\r\n        // Handle ICE candidates\r\n        peerConnection.onicecandidate = (event) => {\r\n            if (event.candidate && window.proximityApp) {\r\n                window.proximityApp.connectionManager.emit('ice-candidate', {\r\n                    target: userId,\r\n                    candidate: event.candidate\r\n                });\r\n            }\r\n        };\r\n\r\n        // Create and send offer\r\n        try {\r\n            const offer = await peerConnection.createOffer();\r\n            await peerConnection.setLocalDescription(offer);\r\n            \r\n            if (window.proximityApp) {\r\n                window.proximityApp.connectionManager.emit('offer', {\r\n                    target: userId,\r\n                    offer: offer\r\n                });\r\n            }\r\n        } catch (error) {\r\n            console.error('Error creating offer for user:', userId, error);\r\n            this.peerConnections.delete(userId);\r\n        }\r\n    }\r\n\r\n    async handleOffer(offer, from) {\r\n        console.log('Handling offer from:', from);\r\n        \r\n        if (this.peerConnections.has(from)) {\r\n            console.log('Connection already exists for user:', from);\r\n            return;\r\n        }\r\n\r\n        const peerConnection = new RTCPeerConnection({ iceServers: this.iceServers });\r\n        this.peerConnections.set(from, peerConnection);\r\n\r\n        // Add local stream\r\n        if (this.localStream) {\r\n            this.localStream.getTracks().forEach(track => {\r\n                peerConnection.addTrack(track, this.localStream);\r\n            });\r\n        }\r\n\r\n        // Handle incoming stream\r\n        peerConnection.ontrack = (event) => {\r\n            console.log('Received remote stream from:', from);\r\n            const remoteStream = event.streams[0];\r\n            \r\n            // Create audio element\r\n            const audioElement = document.createElement('audio');\r\n            audioElement.autoplay = true;\r\n            audioElement.srcObject = remoteStream;\r\n            audioElement.volume = 1;\r\n            audioElement.style.display = 'none';\r\n            \r\n            // Add to participant\r\n            const participant = document.getElementById(`participant-${from}`);\r\n            if (participant) {\r\n                participant.appendChild(audioElement);\r\n            }\r\n            \r\n            // Notify proximity map\r\n            if (window.proximityApp && window.proximityApp.proximityMap) {\r\n                window.proximityApp.proximityMap.setUserAudioElement(from, audioElement);\r\n            }\r\n        };\r\n\r\n        // Handle ICE candidates\r\n        peerConnection.onicecandidate = (event) => {\r\n            if (event.candidate && window.proximityApp) {\r\n                window.proximityApp.connectionManager.emit('ice-candidate', {\r\n                    target: from,\r\n                    candidate: event.candidate\r\n                });\r\n            }\r\n        };\r\n\r\n        try {\r\n            await peerConnection.setRemoteDescription(new RTCSessionDescription(offer));\r\n            const answer = await peerConnection.createAnswer();\r\n            await peerConnection.setLocalDescription(answer);\r\n            \r\n            if (window.proximityApp) {\r\n                window.proximityApp.connectionManager.emit('answer', {\r\n                    target: from,\r\n                    answer: answer\r\n                });\r\n            }\r\n        } catch (error) {\r\n            console.error('Error handling offer from:', from, error);\r\n            this.peerConnections.delete(from);\r\n        }\r\n    }\r\n\r\n    async handleAnswer(answer, from) {\r\n        console.log('Handling answer from:', from);\r\n        \r\n        const peerConnection = this.peerConnections.get(from);\r\n        if (!peerConnection) {\r\n            console.warn('No peer connection found for:', from);\r\n            return;\r\n        }\r\n\r\n        try {\r\n            if (peerConnection.signalingState === 'have-local-offer') {\r\n                await peerConnection.setRemoteDescription(new RTCSessionDescription(answer));\r\n            } else {\r\n                console.warn(`Cannot set remote answer in state: ${peerConnection.signalingState}`);\r\n            }\r\n        } catch (error) {\r\n            console.error('Error handling answer from:', from, error);\r\n            this.disconnectFromUser(from);\r\n        }\r\n    }\r\n\r\n    async handleIceCandidate(candidate, from) {\r\n        const peerConnection = this.peerConnections.get(from);\r\n        if (!peerConnection) {\r\n            console.warn('No peer connection found for ICE candidate from:', from);\r\n            return;\r\n        }\r\n\r\n        try {\r\n            if (peerConnection.remoteDescription) {\r\n                await peerConnection.addIceCandidate(new RTCIceCandidate(candidate));\r\n            } else {\r\n                // Queue candidates if remote description not set yet\r\n                if (!peerConnection.queuedCandidates) {\r\n                    peerConnection.queuedCandidates = [];\r\n                }\r\n                peerConnection.queuedCandidates.push(candidate);\r\n            }\r\n        } catch (error) {\r\n            console.error('Error handling ICE candidate from:', from, error);\r\n        }\r\n    }\r\n\r\n    disconnectFromUser(userId) {\r\n        const peerConnection = this.peerConnections.get(userId);\r\n        if (peerConnection) {\r\n            peerConnection.close();\r\n            this.peerConnections.delete(userId);\r\n            console.log('Disconnected from user:', userId);\r\n        }\r\n    }\r\n\r\n    disconnectAll() {\r\n        console.log('Disconnecting from all users...');\r\n        this.peerConnections.forEach((pc, userId) => {\r\n            pc.close();\r\n        });\r\n        this.peerConnections.clear();\r\n    }\r\n\r\n    toggleMute() {\r\n        if (!this.localStream) return;\r\n\r\n        this.isMuted = !this.isMuted;\r\n        \r\n        this.localStream.getAudioTracks().forEach(track => {\r\n            track.enabled = !this.isMuted;\r\n        });\r\n\r\n        // Update UI\r\n        if (window.proximityApp && window.proximityApp.uiManager) {\r\n            window.proximityApp.uiManager.updateMuteStatus(this.isMuted);\r\n        }\r\n\r\n        // Notify server\r\n        if (window.proximityApp) {\r\n            window.proximityApp.updateMicStatus(this.isMuted);\r\n        }\r\n\r\n        console.log('Microphone', this.isMuted ? 'muted' : 'unmuted');\r\n    }\r\n\r\n    setGain(value) {\r\n        // value: 0-100, map to 0-2\r\n        const gainValue = Math.max(0, Math.min(2, value / 50));\r\n        if (this.gainNode) {\r\n            this.gainNode.gain.value = gainValue;\r\n        }\r\n    }\r\n\r\n    async changeInputDevice(deviceId) {\r\n        if (!deviceId) return;\r\n\r\n        try {\r\n            // Stop current stream\r\n            if (this.localStream) {\r\n                this.localStream.getTracks().forEach(track => track.stop());\r\n            }\r\n\r\n            // Get new stream with specific device\r\n            const constraints = {\r\n                audio: {\r\n                    deviceId: { exact: deviceId },\r\n                    echoCancellation: true,\r\n                    noiseSuppression: true,\r\n                    autoGainControl: true\r\n                }\r\n            };\r\n\r\n            this.localStream = await navigator.mediaDevices.getUserMedia(constraints);\r\n\r\n            // Update audio context\r\n            if (this.micSource) {\r\n                this.micSource.disconnect();\r\n            }\r\n            this.micSource = this.audioContext.createMediaStreamSource(this.localStream);\r\n            this.micSource.connect(this.gainNode);\r\n\r\n            // Replace tracks in all peer connections\r\n            this.peerConnections.forEach(pc => {\r\n                const senders = pc.getSenders();\r\n                const audioSender = senders.find(sender => \r\n                    sender.track && sender.track.kind === 'audio'\r\n                );\r\n                if (audioSender) {\r\n                    audioSender.replaceTrack(this.localStream.getAudioTracks()[0]);\r\n                }\r\n            });\r\n\r\n            console.log('Audio input device changed successfully');\r\n        } catch (error) {\r\n            console.error('Error changing audio input device:', error);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    getLocalStream() {\r\n        return this.localStream;\r\n    }\r\n\r\n    cleanup() {\r\n        this.disconnectAll();\r\n        \r\n        if (this.localStream) {\r\n            this.localStream.getTracks().forEach(track => track.stop());\r\n            this.localStream = null;\r\n        }\r\n\r\n        if (this.audioContext && this.audioContext.state !== 'closed') {\r\n            this.audioContext.close();\r\n        }\r\n\r\n        this.initialized = false;\r\n    }\r\n}","// src/renderer/js/chat/ChatManager.js\r\nexport class ChatManager {\r\n    constructor() {\r\n        this.currentRoom = null;\r\n    }\r\n\r\n    sendMessage(message) {\r\n        if (!message.trim()) return;\r\n\r\n        if (!window.proximityApp || !window.proximityApp.connectionManager.socket) {\r\n            console.error('Not connected to server');\r\n            return;\r\n        }\r\n\r\n        if (!window.proximityApp.isInHub) {\r\n            console.error('Not in a channel');\r\n            return;\r\n        }\r\n\r\n        const username = window.proximityApp.settingsManager.get('username') || 'Anonymous';\r\n        \r\n        console.log('Sending chat message:', message);\r\n\r\n        window.proximityApp.connectionManager.emit('send-chat-message', {\r\n            roomId: 'hub-general',\r\n            message: message,\r\n            username: username\r\n        });\r\n    }\r\n\r\n    addMessage(data) {\r\n        if (!window.proximityApp || !window.proximityApp.uiManager) return;\r\n\r\n        console.log('Adding chat message:', data);\r\n        \r\n        window.proximityApp.uiManager.addChatMessage(\r\n            data.username,\r\n            data.message,\r\n            data.timestamp || Date.now()\r\n        );\r\n    }\r\n\r\n    clearMessages() {\r\n        const chatMessages = document.getElementById('chatMessages');\r\n        if (chatMessages) {\r\n            chatMessages.innerHTML = '';\r\n        }\r\n    }\r\n}","// src/renderer/js/core/ConnectionManager.js\r\nexport class ConnectionManager {\r\n    constructor(serverUrl) {\r\n        this.serverUrl = serverUrl;\r\n        this.socket = null;\r\n        this.isConnected = false;\r\n        this.reconnectAttempts = 0;\r\n        this.maxReconnectAttempts = 5;\r\n    }\r\n\r\n    async connect() {\r\n        return new Promise((resolve, reject) => {\r\n            if (typeof io === 'undefined') {\r\n                reject(new Error('Socket.IO not loaded'));\r\n                return;\r\n            }\r\n\r\n            console.log('Connecting to server:', this.serverUrl);\r\n            \r\n            this.socket = io(this.serverUrl, {\r\n                reconnectionAttempts: this.maxReconnectAttempts,\r\n                timeout: 10000,\r\n                transports: ['websocket', 'polling']\r\n            });\r\n\r\n            this.socket.on('connect', () => {\r\n                console.log('Connected to server');\r\n                this.isConnected = true;\r\n                this.reconnectAttempts = 0;\r\n                resolve();\r\n            });\r\n\r\n            this.socket.on('disconnect', () => {\r\n                console.log('Disconnected from server');\r\n                this.isConnected = false;\r\n            });\r\n\r\n            this.socket.on('connect_error', (error) => {\r\n                console.error('Connection error:', error);\r\n                this.isConnected = false;\r\n                this.reconnectAttempts++;\r\n                \r\n                if (this.reconnectAttempts >= this.maxReconnectAttempts) {\r\n                    reject(new Error('Failed to connect to server after multiple attempts'));\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    disconnect() {\r\n        if (this.socket) {\r\n            this.socket.disconnect();\r\n            this.socket = null;\r\n            this.isConnected = false;\r\n        }\r\n    }\r\n\r\n    emit(event, data) {\r\n        if (this.socket && this.isConnected) {\r\n            this.socket.emit(event, data);\r\n        } else {\r\n            console.warn('Attempted to emit event while disconnected:', event);\r\n        }\r\n    }\r\n\r\n    on(event, callback) {\r\n        if (this.socket) {\r\n            this.socket.on(event, callback);\r\n        }\r\n    }\r\n}","// src/renderer/js/proximity/ProximityMap.js\r\nexport class ProximityMap {\r\n    constructor(canvas, app) {\r\n        this.canvas = canvas;\r\n        this.ctx = canvas.getContext('2d');\r\n        this.app = app;\r\n        this.users = new Map(); // userId -> {x, y, username, isSelf, audioElement}\r\n        this.myUserId = null;\r\n        this.proximityRange = 100;\r\n        this.isDragging = false;\r\n        this.dragOffset = { x: 0, y: 0 };\r\n        this.testBotId = null;\r\n        this.testBotMovementInterval = null;\r\n        \r\n        // Audio constants for proximity calculation\r\n        this.EDGE_START = 0.75; // When edge effects begin\r\n        this.OUTER_RANGE = 1.3; // Allow audio to continue beyond visible range\r\n        \r\n        this.setupEventListeners();\r\n        this.startRenderLoop();\r\n        this.resizeCanvas();\r\n        \r\n        window.addEventListener('resize', () => this.resizeCanvas());\r\n    }\r\n\r\n    resizeCanvas() {\r\n        const rect = this.canvas.getBoundingClientRect();\r\n        this.canvas.width = rect.width;\r\n        this.canvas.height = rect.height;\r\n    }\r\n\r\n    setupEventListeners() {\r\n        this.canvas.addEventListener('mousedown', (e) => this.handleMouseDown(e));\r\n        this.canvas.addEventListener('mousemove', (e) => this.handleMouseMove(e));\r\n        this.canvas.addEventListener('mouseup', () => this.handleMouseUp());\r\n        this.canvas.addEventListener('mouseleave', () => this.handleMouseUp());\r\n        \r\n        // Touch events for mobile\r\n        this.canvas.addEventListener('touchstart', (e) => this.handleTouchStart(e));\r\n        this.canvas.addEventListener('touchmove', (e) => this.handleTouchMove(e));\r\n        this.canvas.addEventListener('touchend', () => this.handleMouseUp());\r\n    }\r\n\r\n    handleMouseDown(e) {\r\n        const rect = this.canvas.getBoundingClientRect();\r\n        const x = e.clientX - rect.left;\r\n        const y = e.clientY - rect.top;\r\n        \r\n        if (this.myUserId && this.users.has(this.myUserId)) {\r\n            const myUser = this.users.get(this.myUserId);\r\n            const distance = Math.sqrt((x - myUser.x) ** 2 + (y - myUser.y) ** 2);\r\n            \r\n            if (distance <= 20) { // User circle radius is 20px\r\n                this.isDragging = true;\r\n                this.dragOffset = { x: x - myUser.x, y: y - myUser.y };\r\n                this.canvas.style.cursor = 'grabbing';\r\n            }\r\n        }\r\n    }\r\n\r\n    handleMouseMove(e) {\r\n        const rect = this.canvas.getBoundingClientRect();\r\n        const x = e.clientX - rect.left;\r\n        const y = e.clientY - rect.top;\r\n        \r\n        if (this.isDragging && this.myUserId) {\r\n            const newX = Math.max(20, Math.min(this.canvas.width - 20, x - this.dragOffset.x));\r\n            const newY = Math.max(20, Math.min(this.canvas.height - 20, y - this.dragOffset.y));\r\n            \r\n            this.updateUserPosition(this.myUserId, newX, newY);\r\n            this.updateAudioProximity();\r\n            \r\n            // Emit position update to other users\r\n            if (this.app && this.app.sendPositionUpdate) {\r\n                this.app.sendPositionUpdate(newX, newY);\r\n            }\r\n        } else {\r\n            // Update cursor based on hover\r\n            let isHovering = false;\r\n            if (this.myUserId && this.users.has(this.myUserId)) {\r\n                const myUser = this.users.get(this.myUserId);\r\n                const distance = Math.sqrt((x - myUser.x) ** 2 + (y - myUser.y) ** 2);\r\n                isHovering = distance <= 20;\r\n            }\r\n            this.canvas.style.cursor = isHovering ? 'grab' : 'crosshair';\r\n        }\r\n    }\r\n\r\n    handleMouseUp() {\r\n        this.isDragging = false;\r\n        this.canvas.style.cursor = 'crosshair';\r\n    }\r\n\r\n    handleTouchStart(e) {\r\n        e.preventDefault();\r\n        const touch = e.touches[0];\r\n        const mouseEvent = new MouseEvent('mousedown', {\r\n            clientX: touch.clientX,\r\n            clientY: touch.clientY\r\n        });\r\n        this.handleMouseDown(mouseEvent);\r\n    }\r\n\r\n    handleTouchMove(e) {\r\n        e.preventDefault();\r\n        const touch = e.touches[0];\r\n        const mouseEvent = new MouseEvent('mousemove', {\r\n            clientX: touch.clientX,\r\n            clientY: touch.clientY\r\n        });\r\n        this.handleMouseMove(mouseEvent);\r\n    }\r\n\r\n    addUser(userId, username, isSelf = false, audioElement = null) {\r\n        // Center spawn position with slight randomization\r\n        const x = this.canvas.width / 2 + (Math.random() - 0.5) * 100;\r\n        const y = this.canvas.height / 2 + (Math.random() - 0.5) * 100;\r\n        \r\n        this.users.set(userId, {\r\n            x,\r\n            y,\r\n            username: username || `User ${userId.slice(0, 4)}`,\r\n            isSelf,\r\n            audioElement,\r\n            lastUpdate: Date.now(),\r\n            color: isSelf ? this.app.settingsManager.get('userColor') || 'purple' : 'blue'\r\n        });\r\n\r\n        if (isSelf) {\r\n            this.myUserId = userId;\r\n        }\r\n\r\n        this.updateAudioProximity();\r\n    }\r\n\r\n    removeUser(userId) {\r\n        this.users.delete(userId);\r\n        if (this.myUserId === userId) {\r\n            this.myUserId = null;\r\n        }\r\n        this.updateAudioProximity();\r\n    }\r\n\r\n    clearUsers() {\r\n        this.users.clear();\r\n        this.myUserId = null;\r\n    }\r\n\r\n    updateUserPosition(userId, x, y) {\r\n        if (this.users.has(userId)) {\r\n            const user = this.users.get(userId);\r\n            user.x = x;\r\n            user.y = y;\r\n            user.lastUpdate = Date.now();\r\n        }\r\n    }\r\n\r\n    updateUserColor(userId, color) {\r\n        if (this.users.has(userId)) {\r\n            this.users.get(userId).color = color;\r\n        }\r\n    }\r\n\r\n    setUserAudioElement(userId, audioElement) {\r\n        if (this.users.has(userId)) {\r\n            this.users.get(userId).audioElement = audioElement;\r\n            this.updateAudioProximity();\r\n        }\r\n    }\r\n\r\n    centerMyPosition() {\r\n        if (!this.myUserId || !this.users.has(this.myUserId)) return;\r\n\r\n        const centerX = this.canvas.width / 2;\r\n        const centerY = this.canvas.height / 2;\r\n        \r\n        this.updateUserPosition(this.myUserId, centerX, centerY);\r\n        this.updateAudioProximity();\r\n        \r\n        // Emit position update\r\n        if (this.app && this.app.sendPositionUpdate) {\r\n            this.app.sendPositionUpdate(centerX, centerY);\r\n        }\r\n    }\r\n\r\n    updateAudioProximity() {\r\n        if (!this.myUserId || !this.users.has(this.myUserId)) return;\r\n\r\n        const myUser = this.users.get(this.myUserId);\r\n        \r\n        this.users.forEach((user, userId) => {\r\n            if (userId === this.myUserId || !user.audioElement) return;\r\n\r\n            const distance = Math.sqrt(\r\n                (myUser.x - user.x) ** 2 + (myUser.y - user.y) ** 2\r\n            );\r\n\r\n            // Calculate volume based on proximity (0 to 1)\r\n            let volume = 0;\r\n            \r\n            const normalizedDistance = distance / this.proximityRange;\r\n            \r\n            if (normalizedDistance <= this.OUTER_RANGE) {\r\n                if (normalizedDistance > this.EDGE_START && normalizedDistance <= 1.0) {\r\n                    // Extra feathering at the edge\r\n                    const edgeFactor = (1 - normalizedDistance) / (1 - this.EDGE_START);\r\n                    volume = Math.pow(edgeFactor, 2) * 0.3;\r\n                } else if (normalizedDistance > 1.0 && normalizedDistance <= this.OUTER_RANGE) {\r\n                    // Extended fadeout beyond visible range\r\n                    const fadeoutFactor = (this.OUTER_RANGE - normalizedDistance) / (this.OUTER_RANGE - 1.0);\r\n                    volume = Math.pow(fadeoutFactor, 3) * 0.1;\r\n                } else {\r\n                    // Normal falloff for closer distances\r\n                    volume = Math.max(0, 1 - normalizedDistance);\r\n                    volume = Math.pow(volume, 0.4);\r\n                }\r\n            }\r\n\r\n            // Apply volume\r\n            if (user.audioElement) {\r\n                const currentVolume = user.audioElement.volume;\r\n                const smoothedVolume = currentVolume * 0.8 + volume * 0.2;\r\n                user.audioElement.volume = smoothedVolume;\r\n            }\r\n        });\r\n    }\r\n\r\n    setProximityRange(range) {\r\n        this.proximityRange = range;\r\n        this.updateAudioProximity();\r\n    }\r\n\r\n    startRenderLoop() {\r\n        const render = () => {\r\n            this.render();\r\n            requestAnimationFrame(render);\r\n        };\r\n        render();\r\n    }\r\n\r\n    render() {\r\n        // Clear canvas\r\n        this.ctx.fillStyle = '#0f0f23';\r\n        this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);\r\n\r\n        // Draw grid\r\n        this.drawGrid();\r\n\r\n        // Draw proximity ranges and users\r\n        this.users.forEach((user, userId) => {\r\n            if (userId === this.myUserId) {\r\n                this.drawProximityRange(user.x, user.y, user.color);\r\n            }\r\n        });\r\n\r\n        this.users.forEach((user, userId) => {\r\n            this.drawUser(user, userId === this.myUserId);\r\n        });\r\n\r\n        // Draw connection lines\r\n        if (this.myUserId && this.users.has(this.myUserId)) {\r\n            this.drawConnectionLines();\r\n        }\r\n    }\r\n\r\n    drawGrid() {\r\n        this.ctx.strokeStyle = 'rgba(107, 70, 193, 0.1)';\r\n        this.ctx.lineWidth = 1;\r\n        \r\n        const gridSize = 50;\r\n        \r\n        for (let x = 0; x <= this.canvas.width; x += gridSize) {\r\n            this.ctx.beginPath();\r\n            this.ctx.moveTo(x, 0);\r\n            this.ctx.lineTo(x, this.canvas.height);\r\n            this.ctx.stroke();\r\n        }\r\n        \r\n        for (let y = 0; y <= this.canvas.height; y += gridSize) {\r\n            this.ctx.beginPath();\r\n            this.ctx.moveTo(0, y);\r\n            this.ctx.lineTo(this.canvas.width, y);\r\n            this.ctx.stroke();\r\n        }\r\n    }\r\n\r\n    drawProximityRange(x, y, color = 'purple') {\r\n        const colorMap = {\r\n            blue: ['rgba(59,130,246,0.3)', 'rgba(59,130,246,0.08)', 'rgba(59,130,246,0.15)'],\r\n            green: ['rgba(16,185,129,0.3)', 'rgba(16,185,129,0.08)', 'rgba(16,185,129,0.15)'],\r\n            purple: ['rgba(139,92,246,0.3)', 'rgba(139,92,246,0.08)', 'rgba(139,92,246,0.15)'],\r\n            red: ['rgba(239,68,68,0.3)', 'rgba(239,68,68,0.08)', 'rgba(239,68,68,0.15)'],\r\n            orange: ['rgba(245,158,11,0.3)', 'rgba(245,158,11,0.08)', 'rgba(245,158,11,0.15)'],\r\n            pink: ['rgba(236,72,153,0.3)', 'rgba(236,72,153,0.08)', 'rgba(236,72,153,0.15)'],\r\n            indigo: ['rgba(99,102,241,0.3)', 'rgba(99,102,241,0.08)', 'rgba(99,102,241,0.15)'],\r\n            cyan: ['rgba(6,182,212,0.3)', 'rgba(6,182,212,0.08)', 'rgba(6,182,212,0.15)']\r\n        };\r\n        \r\n        const [strokeColor, fillColor, extendedStrokeColor] = colorMap[color] || colorMap['purple'];\r\n        \r\n        // Draw extended audible range (faded)\r\n        this.ctx.strokeStyle = extendedStrokeColor;\r\n        this.ctx.lineWidth = 1;\r\n        this.ctx.setLineDash([2, 4]);\r\n        this.ctx.beginPath();\r\n        this.ctx.arc(x, y, this.proximityRange * this.OUTER_RANGE, 0, Math.PI * 2);\r\n        this.ctx.stroke();\r\n        \r\n        // Draw main proximity range\r\n        this.ctx.strokeStyle = strokeColor;\r\n        this.ctx.fillStyle = fillColor;\r\n        this.ctx.lineWidth = 2;\r\n        this.ctx.setLineDash([5, 5]);\r\n        this.ctx.beginPath();\r\n        this.ctx.arc(x, y, this.proximityRange, 0, Math.PI * 2);\r\n        this.ctx.fill();\r\n        this.ctx.stroke();\r\n        this.ctx.setLineDash([]);\r\n    }\r\n\r\n    drawUser(user, isSelf) {\r\n        const { x, y, username, color } = user;\r\n        \r\n        const colorMap = {\r\n            blue: ['#3b82f6', '#60a5fa'],\r\n            green: ['#10b981', '#34d399'],\r\n            purple: ['#8b5cf6', '#a78bfa'],\r\n            red: ['#ef4444', '#f87171'],\r\n            orange: ['#f59e0b', '#fbbf24'],\r\n            pink: ['#ec4899', '#f472b6'],\r\n            indigo: ['#6366f1', '#818cf8'],\r\n            cyan: ['#06b6d4', '#22d3ee']\r\n        };\r\n        \r\n        const [fillColor, strokeColor] = colorMap[color] || colorMap['purple'];\r\n        \r\n        this.ctx.fillStyle = fillColor;\r\n        this.ctx.strokeStyle = strokeColor;\r\n        this.ctx.lineWidth = 3;\r\n        this.ctx.beginPath();\r\n        this.ctx.arc(x, y, 20, 0, Math.PI * 2);\r\n        this.ctx.fill();\r\n        this.ctx.stroke();\r\n        \r\n        // User initial/icon\r\n        this.ctx.fillStyle = '#ffffff';\r\n        this.ctx.font = 'bold 16px sans-serif';\r\n        this.ctx.textAlign = 'center';\r\n        this.ctx.textBaseline = 'middle';\r\n        \r\n        const initial = username.charAt(0).toUpperCase();\r\n        this.ctx.fillText(initial, x, y);\r\n        \r\n        // Username label\r\n        this.ctx.fillStyle = isSelf ? strokeColor : '#cbd5e1';\r\n        this.ctx.font = '12px sans-serif';\r\n        this.ctx.textAlign = 'center';\r\n        this.ctx.textBaseline = 'top';\r\n        const displayName = isSelf ? `${username} (You)` : username;\r\n        this.ctx.fillText(displayName, x, y + 30);\r\n        \r\n        // Activity indicator (pulsing effect when speaking)\r\n        if (user.isActive) {\r\n            const pulseRadius = 25 + Math.sin(Date.now() * 0.01) * 5;\r\n            const glowColor = colorMap[color] ? colorMap[color][0].replace('1)', '0.6)') : 'rgba(139,92,246,0.6)';\r\n            this.ctx.strokeStyle = glowColor;\r\n            this.ctx.lineWidth = 2;\r\n            this.ctx.beginPath();\r\n            this.ctx.arc(x, y, pulseRadius, 0, Math.PI * 2);\r\n            this.ctx.stroke();\r\n        }\r\n    }\r\n\r\n    drawConnectionLines() {\r\n        if (!this.myUserId || !this.users.has(this.myUserId)) return;\r\n\r\n        const myUser = this.users.get(this.myUserId);\r\n        \r\n        this.users.forEach((user, userId) => {\r\n            if (userId === this.myUserId) return;\r\n\r\n            const distance = Math.sqrt(\r\n                (myUser.x - user.x) ** 2 + (myUser.y - user.y) ** 2\r\n            );\r\n\r\n            if (distance <= this.proximityRange) {\r\n                const opacity = Math.max(0.1, 1 - (distance / this.proximityRange));\r\n                this.ctx.strokeStyle = `rgba(16, 185, 129, ${opacity * 0.5})`;\r\n                this.ctx.lineWidth = 2;\r\n                \r\n                this.ctx.beginPath();\r\n                this.ctx.moveTo(myUser.x, myUser.y);\r\n                this.ctx.lineTo(user.x, user.y);\r\n                this.ctx.stroke();\r\n            }\r\n        });\r\n    }\r\n\r\n    // Called when user speaks to show activity\r\n    setUserActivity(userId, isActive) {\r\n        if (this.users.has(userId)) {\r\n            this.users.get(userId).isActive = isActive;\r\n        }\r\n    }\r\n\r\n    // Test bot functionality\r\n    addTestBot() {\r\n        this.removeTestBot();\r\n\r\n        this.testBotId = 'test-bot-' + Date.now();\r\n        \r\n        const audioElement = new Audio('assets/TestNoise.mp3');\r\n        audioElement.loop = true;\r\n        audioElement.volume = 0;\r\n        \r\n        let x, y;\r\n        if (this.myUserId && this.users.has(this.myUserId)) {\r\n            const myUser = this.users.get(this.myUserId);\r\n            const angle = Math.random() * Math.PI * 2;\r\n            const distance = this.proximityRange * 0.9;\r\n            \r\n            x = myUser.x + Math.cos(angle) * distance;\r\n            y = myUser.y + Math.sin(angle) * distance;\r\n            \r\n            x = Math.max(20, Math.min(this.canvas.width - 20, x));\r\n            y = Math.max(20, Math.min(this.canvas.height - 20, y));\r\n        } else {\r\n            x = Math.random() * (this.canvas.width - 40) + 20;\r\n            y = Math.random() * (this.canvas.height - 40) + 20;\r\n        }\r\n        \r\n        this.users.set(this.testBotId, {\r\n            x, y,\r\n            username: 'Test Bot',\r\n            isSelf: false,\r\n            audioElement,\r\n            lastUpdate: Date.now(),\r\n            color: 'green',\r\n            isBot: true\r\n        });\r\n        \r\n        audioElement.play();\r\n        this.updateAudioProximity();\r\n        this.startTestBotMovement();\r\n        \r\n        return this.testBotId;\r\n    }\r\n    \r\n    removeTestBot() {\r\n        if (this.testBotMovementInterval) {\r\n            clearInterval(this.testBotMovementInterval);\r\n            this.testBotMovementInterval = null;\r\n        }\r\n        \r\n        if (this.testBotId && this.users.has(this.testBotId)) {\r\n            const bot = this.users.get(this.testBotId);\r\n            \r\n            if (bot.audioElement) {\r\n                bot.audioElement.pause();\r\n                bot.audioElement.srcObject = null;\r\n            }\r\n            \r\n            this.users.delete(this.testBotId);\r\n            this.testBotId = null;\r\n            this.updateAudioProximity();\r\n        }\r\n    }\r\n    \r\n    startTestBotMovement() {\r\n        if (this.testBotMovementInterval) {\r\n            clearInterval(this.testBotMovementInterval);\r\n        }\r\n        \r\n        this.testBotMovementInterval = setInterval(() => {\r\n            if (this.testBotId && this.users.has(this.testBotId)) {\r\n                const bot = this.users.get(this.testBotId);\r\n                \r\n                const targetX = Math.random() * (this.canvas.width - 40) + 20;\r\n                const targetY = Math.random() * (this.canvas.height - 40) + 20;\r\n                \r\n                const startX = bot.x;\r\n                const startY = bot.y;\r\n                const startTime = Date.now();\r\n                const duration = 3000;\r\n                \r\n                const animateMovement = () => {\r\n                    const elapsed = Date.now() - startTime;\r\n                    const progress = Math.min(elapsed / duration, 1);\r\n                    \r\n                    const easing = progress < 0.5 ? 2 * progress * progress : 1 - Math.pow(-2 * progress + 2, 2) / 2;\r\n                    \r\n                    bot.x = startX + (targetX - startX) * easing;\r\n                    bot.y = startY + (targetY - startY) * easing;\r\n                    \r\n                    if (progress < 1) {\r\n                        requestAnimationFrame(animateMovement);\r\n                    }\r\n                    \r\n                    this.updateAudioProximity();\r\n                };\r\n                \r\n                animateMovement();\r\n                \r\n                bot.isActive = true;\r\n                setTimeout(() => {\r\n                    if (this.testBotId && this.users.has(this.testBotId)) {\r\n                        this.users.get(this.testBotId).isActive = false;\r\n                    }\r\n                }, 500);\r\n            }\r\n        }, 5000);\r\n    }\r\n}","// src/renderer/js/server/ServerManager.js\r\nexport class ServerManager {\r\n    constructor() {\r\n        this.availableServers = [];\r\n        this.myServers = [];\r\n        this.favoriteServers = [];\r\n    }\r\n\r\n    async loadServerData() {\r\n        try {\r\n            const savedMyServers = localStorage.getItem('proximity-my-servers');\r\n            if (savedMyServers) {\r\n                this.myServers = JSON.parse(savedMyServers);\r\n            }\r\n            \r\n            const savedFavorites = localStorage.getItem('proximity-favorite-servers');\r\n            if (savedFavorites) {\r\n                this.favoriteServers = JSON.parse(savedFavorites);\r\n            }\r\n        } catch (error) {\r\n            console.error('Error loading server data:', error);\r\n        }\r\n    }\r\n\r\n    saveServerData() {\r\n        try {\r\n            localStorage.setItem('proximity-my-servers', JSON.stringify(this.myServers));\r\n            localStorage.setItem('proximity-favorite-servers', JSON.stringify(this.favoriteServers));\r\n        } catch (error) {\r\n            console.error('Error saving server data:', error);\r\n        }\r\n    }\r\n\r\n    createServer(name, description) {\r\n        if (!window.proximityApp || !window.proximityApp.connectionManager.socket) {\r\n            throw new Error('Not connected to server');\r\n        }\r\n\r\n        window.proximityApp.connectionManager.emit('create-server', {\r\n            serverName: name,\r\n            serverDescription: description\r\n        });\r\n    }\r\n\r\n    joinServer(server) {\r\n        // Implementation for joining custom servers\r\n        // For now, we'll focus on the hub\r\n        console.log('Joining server:', server);\r\n    }\r\n\r\n    addToFavorites(serverId) {\r\n        if (!this.favoriteServers.includes(serverId)) {\r\n            this.favoriteServers.push(serverId);\r\n            this.saveServerData();\r\n        }\r\n    }\r\n\r\n    removeFromFavorites(serverId) {\r\n        this.favoriteServers = this.favoriteServers.filter(id => id !== serverId);\r\n        this.saveServerData();\r\n    }\r\n\r\n    addToMyServers(serverId) {\r\n        if (!this.myServers.includes(serverId)) {\r\n            this.myServers.push(serverId);\r\n            this.saveServerData();\r\n        }\r\n    }\r\n\r\n    updateAvailableServers(servers) {\r\n        this.availableServers = servers;\r\n        // Could emit event here for UI updates\r\n    }\r\n}","// src/renderer/js/settings/SettingsManager.js\r\nexport class SettingsManager {\r\n    constructor() {\r\n        this.settings = {\r\n            username: '',\r\n            userColor: 'purple',\r\n            audioGain: 50,\r\n            noiseSupression: true,\r\n            echoCancellation: true,\r\n            autoJoin: false,\r\n            muteHotkey: 'Ctrl+M',\r\n            deafenHotkey: 'Ctrl+D',\r\n            audioOutputDevice: ''\r\n        };\r\n        this.storageKey = 'proximity-settings';\r\n    }\r\n\r\n    async load() {\r\n        try {\r\n            const savedSettings = localStorage.getItem(this.storageKey);\r\n            if (savedSettings) {\r\n                this.settings = { ...this.settings, ...JSON.parse(savedSettings) };\r\n                console.log('Settings loaded:', this.settings);\r\n            }\r\n        } catch (error) {\r\n            console.error('Error loading settings:', error);\r\n        }\r\n        \r\n        this.applyToUI();\r\n    }\r\n\r\n    save() {\r\n        try {\r\n            localStorage.setItem(this.storageKey, JSON.stringify(this.settings));\r\n            console.log('Settings saved');\r\n        } catch (error) {\r\n            console.error('Error saving settings:', error);\r\n        }\r\n    }\r\n\r\n    get(key) {\r\n        return this.settings[key];\r\n    }\r\n\r\n    set(key, value) {\r\n        this.settings[key] = value;\r\n        this.save();\r\n        this.applyToUI();\r\n    }\r\n\r\n    update(newSettings) {\r\n        this.settings = { ...this.settings, ...newSettings };\r\n        this.save();\r\n        this.applyToUI();\r\n    }\r\n\r\n    reset() {\r\n        this.settings = {\r\n            username: '',\r\n            userColor: 'purple',\r\n            audioGain: 50,\r\n            noiseSupression: true,\r\n            echoCancellation: true,\r\n            autoJoin: false,\r\n            muteHotkey: 'Ctrl+M',\r\n            deafenHotkey: 'Ctrl+D',\r\n            audioOutputDevice: ''\r\n        };\r\n        this.save();\r\n        this.applyToUI();\r\n    }\r\n\r\n    applyToUI() {\r\n        // Username\r\n        const usernameInput = document.getElementById('username');\r\n        if (usernameInput) {\r\n            usernameInput.value = this.settings.username;\r\n        }\r\n\r\n        // Audio gain\r\n        const audioGainSlider = document.getElementById('audioGain');\r\n        if (audioGainSlider) {\r\n            audioGainSlider.value = this.settings.audioGain;\r\n            const valueDisplay = document.querySelector('.slider-value');\r\n            if (valueDisplay) {\r\n                valueDisplay.textContent = `${this.settings.audioGain}%`;\r\n            }\r\n        }\r\n\r\n        // Checkboxes\r\n        const noiseSupressionCheck = document.getElementById('noiseSupression');\r\n        if (noiseSupressionCheck) {\r\n            noiseSupressionCheck.checked = this.settings.noiseSupression;\r\n        }\r\n\r\n        const echoCancellationCheck = document.getElementById('echoCancellation');\r\n        if (echoCancellationCheck) {\r\n            echoCancellationCheck.checked = this.settings.echoCancellation;\r\n        }\r\n\r\n        const autoJoinCheck = document.getElementById('autoJoin');\r\n        if (autoJoinCheck) {\r\n            autoJoinCheck.checked = this.settings.autoJoin;\r\n        }\r\n\r\n        // Color picker\r\n        const colorOptions = document.querySelectorAll('.color-option');\r\n        colorOptions.forEach(option => {\r\n            option.classList.remove('selected');\r\n            if (option.dataset.color === this.settings.userColor) {\r\n                option.classList.add('selected');\r\n            }\r\n        });\r\n\r\n        // Audio output device\r\n        const audioOutputDeviceSelect = document.getElementById('audioOutputDevice');\r\n        if (audioOutputDeviceSelect) {\r\n            audioOutputDeviceSelect.value = this.settings.audioOutputDevice || '';\r\n        }\r\n\r\n        // Apply audio gain to audio manager\r\n        if (window.proximityApp && window.proximityApp.audioManager) {\r\n            window.proximityApp.audioManager.setGain(this.settings.audioGain);\r\n        }\r\n    }\r\n}","// src/renderer/js/ui/UIManager.js - Fixed version with proper home button setup\r\nexport class UIManager {\r\n    constructor() {\r\n        this.eventHandlers = {};\r\n        this.elements = {};\r\n    }\r\n\r\n    init() {\r\n        this.cacheElements();\r\n        this.setupEventListeners();\r\n        this.addHubToNavigation();\r\n        this.setupHomePageEvents(); // Add this\r\n    }\r\n\r\n    cacheElements() {\r\n        // Navigation\r\n        this.elements.navItems = document.querySelectorAll('.nav-item');\r\n        this.elements.pages = document.querySelectorAll('.page');\r\n        \r\n        // Connection status\r\n        this.elements.connectionIndicator = document.getElementById('connectionIndicator');\r\n        this.elements.connectionText = document.getElementById('connectionText');\r\n        \r\n        // Server view\r\n        this.elements.currentServerName = document.getElementById('currentServerName');\r\n        this.elements.serverInviteDisplay = document.getElementById('serverInviteDisplay');\r\n        this.elements.participantsList = document.getElementById('participantsList');\r\n        \r\n        // Chat\r\n        this.elements.chatMessages = document.getElementById('chatMessages');\r\n        this.elements.messageInput = document.getElementById('messageInput');\r\n        this.elements.sendMessageBtn = document.getElementById('sendMessageBtn');\r\n        \r\n        // Voice controls\r\n        this.elements.muteButton = document.getElementById('muteButton');\r\n        this.elements.mapMuteButton = document.getElementById('mapMuteButton');\r\n        this.elements.leaveChannelBtn = document.getElementById('leaveChannelBtn');\r\n        this.elements.leaveChannelServerBtn = document.getElementById('leaveChannelServerBtn');\r\n        \r\n        // Audio devices\r\n        this.elements.audioDeviceSelect = document.getElementById('audioDevice');\r\n        this.elements.audioOutputDeviceSelect = document.getElementById('audioOutputDevice');\r\n        \r\n        // Home page elements\r\n        this.elements.joinHubBtn = document.getElementById('joinHubBtn');\r\n    }\r\n\r\n    setupEventListeners() {\r\n        // Navigation\r\n        this.elements.navItems.forEach(item => {\r\n            item.addEventListener('click', () => {\r\n                const page = item.dataset.page;\r\n                this.switchPage(page);\r\n                this.emit('page-change', page);\r\n            });\r\n        });\r\n\r\n        // Chat\r\n        if (this.elements.sendMessageBtn) {\r\n            this.elements.sendMessageBtn.addEventListener('click', () => {\r\n                this.sendChatMessage();\r\n            });\r\n        }\r\n\r\n        if (this.elements.messageInput) {\r\n            this.elements.messageInput.addEventListener('keypress', (e) => {\r\n                if (e.key === 'Enter') {\r\n                    this.sendChatMessage();\r\n                }\r\n            });\r\n        }\r\n\r\n        // Voice controls\r\n        [this.elements.muteButton, this.elements.mapMuteButton].forEach(btn => {\r\n            if (btn) {\r\n                btn.addEventListener('click', () => {\r\n                    this.emit('mute-toggle');\r\n                });\r\n            }\r\n        });\r\n\r\n        [this.elements.leaveChannelBtn, this.elements.leaveChannelServerBtn].forEach(btn => {\r\n            if (btn) {\r\n                btn.addEventListener('click', () => {\r\n                    this.emit('leave-channel');\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n    setupHomePageEvents() {\r\n        // Home page hub button\r\n        if (this.elements.joinHubBtn) {\r\n            this.elements.joinHubBtn.addEventListener('click', () => {\r\n                console.log('Home page hub button clicked');\r\n                this.emit('join-hub');\r\n            });\r\n        }\r\n    }\r\n\r\n    addHubToNavigation() {\r\n        // Add Community Hub to navigation\r\n        const hubNavItem = document.createElement('div');\r\n        hubNavItem.className = 'nav-item';\r\n        hubNavItem.dataset.page = 'hub';\r\n        hubNavItem.innerHTML = `\r\n            <div class=\"nav-icon\">🏢</div>\r\n            <span class=\"nav-text\">Community Hub</span>\r\n        `;\r\n        \r\n        hubNavItem.addEventListener('click', () => {\r\n            console.log('Navigation hub button clicked');\r\n            this.switchPage('server-view');\r\n            this.emit('join-hub');\r\n        });\r\n\r\n        // Insert after the home nav item\r\n        const homeNavItem = document.querySelector('.nav-item[data-page=\"home\"]');\r\n        if (homeNavItem && homeNavItem.parentNode) {\r\n            homeNavItem.parentNode.insertBefore(hubNavItem, homeNavItem.nextSibling);\r\n            \r\n            // Update cached nav items\r\n            this.elements.navItems = document.querySelectorAll('.nav-item');\r\n        }\r\n    }\r\n\r\n    switchPage(pageName) {\r\n        console.log('Switching to page:', pageName);\r\n        \r\n        // Update navigation\r\n        this.elements.navItems.forEach(item => {\r\n            item.classList.toggle('active', item.dataset.page === pageName);\r\n        });\r\n\r\n        // Update pages\r\n        this.elements.pages.forEach(page => {\r\n            page.classList.toggle('active', page.id === `${pageName}-page`);\r\n        });\r\n\r\n        // Special hub handling\r\n        if (pageName === 'hub') {\r\n            // Show server view but mark hub as active\r\n            document.getElementById('server-view-page').classList.add('active');\r\n            const hubNavItem = document.querySelector('.nav-item[data-page=\"hub\"]');\r\n            if (hubNavItem) {\r\n                hubNavItem.classList.add('active');\r\n            }\r\n        }\r\n    }\r\n\r\n    showServerView(server) {\r\n        this.switchPage('server-view');\r\n        \r\n        if (this.elements.currentServerName) {\r\n            this.elements.currentServerName.textContent = server.name;\r\n        }\r\n        \r\n        if (this.elements.serverInviteDisplay) {\r\n            this.elements.serverInviteDisplay.textContent = server.id === 'hub' ? 'COMMUNITY-HUB' : server.id;\r\n        }\r\n\r\n        // Set up hub channels\r\n        if (server.id === 'hub') {\r\n            this.setupHubChannels();\r\n        }\r\n    }\r\n\r\n    setupHubChannels() {\r\n        const textChannelsList = document.getElementById('textChannelsList');\r\n        const voiceChannelsList = document.getElementById('voiceChannelsList');\r\n        \r\n        if (textChannelsList) {\r\n            textChannelsList.innerHTML = `\r\n                <div class=\"channel-item active\" data-channel-type=\"text\" data-channel-id=\"general\">\r\n                    <span class=\"channel-icon\">#</span>\r\n                    <span class=\"channel-name\">general</span>\r\n                </div>\r\n            `;\r\n        }\r\n        \r\n        if (voiceChannelsList) {\r\n            voiceChannelsList.innerHTML = `\r\n                <div class=\"channel-item\" data-channel-type=\"voice\" data-channel-id=\"general-voice\">\r\n                    <span class=\"channel-icon\">🔊</span>\r\n                    <span class=\"channel-name\">General Voice</span>\r\n                    <div class=\"voice-participants\" id=\"voiceParticipants\"></div>\r\n                </div>\r\n            `;\r\n        }\r\n\r\n        // Auto-join voice channel\r\n        setTimeout(() => {\r\n            this.switchToChannel('general-voice', 'voice');\r\n        }, 100);\r\n    }\r\n\r\n    switchToChannel(channelId, channelType) {\r\n        // Update channel selection\r\n        document.querySelectorAll('.channel-item').forEach(item => {\r\n            item.classList.remove('active');\r\n        });\r\n        \r\n        const activeChannel = document.querySelector(`[data-channel-id=\"${channelId}\"]`);\r\n        if (activeChannel) {\r\n            activeChannel.classList.add('active');\r\n        }\r\n        \r\n        // Switch content view\r\n        document.querySelectorAll('.content-view').forEach(view => {\r\n            view.classList.remove('active');\r\n        });\r\n        \r\n        if (channelType === 'text') {\r\n            const textView = document.getElementById('text-chat-view');\r\n            if (textView) textView.classList.add('active');\r\n        } else if (channelType === 'voice') {\r\n            const voiceView = document.getElementById('voice-channel-view');\r\n            if (voiceView) voiceView.classList.add('active');\r\n        }\r\n    }\r\n\r\n    addParticipant(userId, stream, isSelf = false, username = 'Anonymous', userColor = 'purple') {\r\n        if (document.getElementById(`participant-${userId}`)) {\r\n            return; // Already exists\r\n        }\r\n\r\n        const participant = document.createElement('div');\r\n        participant.className = 'participant';\r\n        participant.id = `participant-${userId}`;\r\n        \r\n        const micStatus = document.createElement('div');\r\n        micStatus.className = 'mic-status active';\r\n        \r\n        const avatar = document.createElement('span');\r\n        avatar.className = 'participant-avatar';\r\n        avatar.style.cssText = 'margin-right: 8px; font-size: 16px;';\r\n        avatar.textContent = this.getColorEmoji(userColor);\r\n        \r\n        const name = document.createElement('span');\r\n        name.textContent = isSelf ? `${username} (You)` : username;\r\n        name.style.fontWeight = isSelf ? 'bold' : 'normal';\r\n        name.classList.add(`user-color-${userColor}`);\r\n        \r\n        participant.appendChild(micStatus);\r\n        participant.appendChild(avatar);\r\n        participant.appendChild(name);\r\n        \r\n        // Add audio element for remote users\r\n        if (!isSelf && stream) {\r\n            const audioElement = document.createElement('audio');\r\n            audioElement.autoplay = true;\r\n            audioElement.srcObject = stream;\r\n            audioElement.volume = 1;\r\n            audioElement.style.display = 'none';\r\n            participant.appendChild(audioElement);\r\n        }\r\n        \r\n        if (this.elements.participantsList) {\r\n            this.elements.participantsList.appendChild(participant);\r\n        }\r\n    }\r\n\r\n    removeParticipant(userId) {\r\n        const participant = document.getElementById(`participant-${userId}`);\r\n        if (participant) {\r\n            participant.remove();\r\n        }\r\n    }\r\n\r\n    clearParticipants() {\r\n        if (this.elements.participantsList) {\r\n            this.elements.participantsList.innerHTML = '';\r\n        }\r\n    }\r\n\r\n    updateMuteStatus(isMuted) {\r\n        [this.elements.muteButton, this.elements.mapMuteButton].forEach(button => {\r\n            if (button) {\r\n                const textSpan = button.querySelector('.text');\r\n                const iconSpan = button.querySelector('.icon');\r\n                \r\n                if (textSpan) textSpan.textContent = isMuted ? 'Unmute' : 'Mute';\r\n                if (iconSpan) iconSpan.textContent = isMuted ? '🔇' : '🎤';\r\n                \r\n                button.classList.toggle('muted', isMuted);\r\n            }\r\n        });\r\n    }\r\n\r\n    updateConnectionStatus(status, text) {\r\n        if (this.elements.connectionIndicator && this.elements.connectionText) {\r\n            this.elements.connectionIndicator.classList.remove('online', 'offline', 'connecting');\r\n            this.elements.connectionIndicator.classList.add(status);\r\n            this.elements.connectionText.textContent = text;\r\n        }\r\n    }\r\n\r\n    sendChatMessage() {\r\n        if (!this.elements.messageInput) return;\r\n        \r\n        const message = this.elements.messageInput.value.trim();\r\n        if (!message) return;\r\n        \r\n        this.emit('send-message', message);\r\n        this.elements.messageInput.value = '';\r\n    }\r\n\r\n    addChatMessage(username, message, timestamp) {\r\n        if (!this.elements.chatMessages) return;\r\n\r\n        const messageElement = document.createElement('div');\r\n        messageElement.className = 'message';\r\n\r\n        const messageHeader = document.createElement('div');\r\n        messageHeader.className = 'message-header';\r\n\r\n        const author = document.createElement('span');\r\n        author.className = 'message-author';\r\n        author.textContent = username;\r\n\r\n        const time = document.createElement('span');\r\n        time.className = 'message-timestamp';\r\n        time.textContent = new Date(timestamp).toLocaleTimeString();\r\n\r\n        messageHeader.appendChild(author);\r\n        messageHeader.appendChild(time);\r\n\r\n        const content = document.createElement('div');\r\n        content.className = 'message-content';\r\n        content.textContent = message;\r\n\r\n        messageElement.appendChild(messageHeader);\r\n        messageElement.appendChild(content);\r\n\r\n        this.elements.chatMessages.appendChild(messageElement);\r\n        this.elements.chatMessages.scrollTop = this.elements.chatMessages.scrollHeight;\r\n    }\r\n\r\n    async populateAudioDevices() {\r\n        if (!this.elements.audioDeviceSelect || !this.elements.audioOutputDeviceSelect) return;\r\n        \r\n        try {\r\n            const devices = await navigator.mediaDevices.enumerateDevices();\r\n            const audioInputs = devices.filter(device => device.kind === 'audioinput');\r\n            const audioOutputs = devices.filter(device => device.kind === 'audiooutput');\r\n\r\n            this.elements.audioDeviceSelect.innerHTML = '<option value=\"\">Select Audio Device</option>';\r\n            this.elements.audioOutputDeviceSelect.innerHTML = '<option value=\"\">Select Output Device</option>';\r\n\r\n            audioInputs.forEach((device, index) => {\r\n                const option = document.createElement('option');\r\n                option.value = device.deviceId;\r\n                option.textContent = device.label || `Microphone ${index + 1}`;\r\n                this.elements.audioDeviceSelect.appendChild(option);\r\n            });\r\n\r\n            audioOutputs.forEach((device, index) => {\r\n                const option = document.createElement('option');\r\n                option.value = device.deviceId;\r\n                option.textContent = device.label || `Speaker ${index + 1}`;\r\n                this.elements.audioOutputDeviceSelect.appendChild(option);\r\n            });\r\n        } catch (error) {\r\n            console.error('Error populating audio devices:', error);\r\n        }\r\n    }\r\n\r\n    showNotification(message, type = 'info') {\r\n        console.log(`Notification [${type}]: ${message}`);\r\n        \r\n        const notification = document.createElement('div');\r\n        notification.className = `notification ${type}`;\r\n        notification.textContent = message;\r\n        \r\n        Object.assign(notification.style, {\r\n            position: 'fixed',\r\n            top: '20px',\r\n            right: '20px',\r\n            padding: '12px 20px',\r\n            borderRadius: '8px',\r\n            color: 'white',\r\n            fontWeight: '500',\r\n            zIndex: '9999',\r\n            opacity: '0',\r\n            transform: 'translateX(100%)',\r\n            transition: 'all 0.3s ease'\r\n        });\r\n        \r\n        const colors = {\r\n            success: '#10b981',\r\n            error: '#ef4444',\r\n            warning: '#f59e0b',\r\n            info: '#6b46c1'\r\n        };\r\n        notification.style.backgroundColor = colors[type] || colors.info;\r\n        \r\n        document.body.appendChild(notification);\r\n        \r\n        setTimeout(() => {\r\n            notification.style.opacity = '1';\r\n            notification.style.transform = 'translateX(0)';\r\n        }, 10);\r\n        \r\n        setTimeout(() => {\r\n            notification.style.opacity = '0';\r\n            notification.style.transform = 'translateX(100%)';\r\n            setTimeout(() => {\r\n                if (notification.parentNode) {\r\n                    document.body.removeChild(notification);\r\n                }\r\n            }, 300);\r\n        }, 3000);\r\n    }\r\n\r\n    getColorEmoji(color) {\r\n        const colorEmojis = {\r\n            blue: '🔵',\r\n            green: '🟢', \r\n            purple: '🟣',\r\n            red: '🔴',\r\n            orange: '🟠',\r\n            pink: '🩷',\r\n            indigo: '💜',\r\n            cyan: '🔹'\r\n        };\r\n        return colorEmojis[color] || colorEmojis['purple'];\r\n    }\r\n\r\n    // Event system\r\n    on(event, callback) {\r\n        if (!this.eventHandlers[event]) {\r\n            this.eventHandlers[event] = [];\r\n        }\r\n        this.eventHandlers[event].push(callback);\r\n    }\r\n\r\n    emit(event, data) {\r\n        if (this.eventHandlers[event]) {\r\n            this.eventHandlers[event].forEach(callback => callback(data));\r\n        }\r\n    }\r\n}","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","// src/renderer/js/main.js - Main entry point for the renderer process\r\nimport { ConnectionManager } from './core/ConnectionManager.js';\r\nimport { UIManager } from './ui/UIManager.js';\r\nimport { AudioManager } from './audio/AudioManager.js';\r\nimport { ProximityMap } from './proximity/ProximityMap.js';\r\nimport { ServerManager } from './server/ServerManager.js';\r\nimport { ChatManager } from './chat/ChatManager.js';\r\nimport { SettingsManager } from './settings/SettingsManager.js';\r\n\r\nconst SERVER_URL = 'https://myserver2-production.up.railway.app';\r\n\r\nclass ProximityApp {\r\n    constructor() {\r\n        console.log('ProximityApp initializing...');\r\n        \r\n        // Core managers\r\n        this.connectionManager = new ConnectionManager(SERVER_URL);\r\n        this.uiManager = new UIManager();\r\n        this.audioManager = new AudioManager();\r\n        this.settingsManager = new SettingsManager();\r\n        this.serverManager = new ServerManager();\r\n        this.chatManager = new ChatManager();\r\n        this.proximityMap = null;\r\n        \r\n        // State\r\n        this.currentServer = null;\r\n        this.currentChannel = null;\r\n        this.myUserId = null;\r\n        this.isInHub = false;\r\n        \r\n        this.init();\r\n    }\r\n\r\n    async init() {\r\n        try {\r\n            // Initialize settings first\r\n            await this.settingsManager.load();\r\n            \r\n            // Initialize UI\r\n            this.uiManager.init();\r\n            this.setupEventListeners();\r\n            \r\n            // Initialize proximity map\r\n            this.proximityMap = new ProximityMap(\r\n                document.getElementById('proximityMap'), \r\n                this\r\n            );\r\n            \r\n            // Connect to server\r\n            await this.connectionManager.connect();\r\n            this.myUserId = this.connectionManager.socket.id;\r\n            \r\n            // Setup connection event handlers\r\n            this.setupConnectionHandlers();\r\n            \r\n            console.log('ProximityApp initialized successfully');\r\n            \r\n        } catch (error) {\r\n            console.error('Failed to initialize app:', error);\r\n            this.uiManager.showNotification('Failed to initialize app', 'error');\r\n        }\r\n    }\r\n\r\n    setupEventListeners() {\r\n        // Navigation\r\n        this.uiManager.on('page-change', (page) => this.handlePageChange(page));\r\n        this.uiManager.on('join-hub', () => this.joinHub());\r\n        this.uiManager.on('leave-channel', () => this.leaveCurrentChannel());\r\n        this.uiManager.on('mute-toggle', () => this.audioManager.toggleMute());\r\n        \r\n        // Chat\r\n        this.uiManager.on('send-message', (message) => this.chatManager.sendMessage(message));\r\n        \r\n        // Settings\r\n        this.uiManager.on('settings-change', (settings) => this.settingsManager.update(settings));\r\n    }\r\n\r\n    setupConnectionHandlers() {\r\n        const socket = this.connectionManager.socket;\r\n        \r\n        socket.on('connect', () => {\r\n            console.log('Connected to server');\r\n            this.myUserId = socket.id;\r\n            this.uiManager.updateConnectionStatus('online', 'Connected');\r\n            this.uiManager.showNotification('Connected to server', 'success');\r\n        });\r\n\r\n        socket.on('disconnect', () => {\r\n            this.uiManager.updateConnectionStatus('offline', 'Disconnected');\r\n            this.uiManager.showNotification('Disconnected from server', 'warning');\r\n        });\r\n\r\n        // Hub events\r\n        socket.on('hub-users', (users) => {\r\n            console.log('Hub users received:', users);\r\n            this.handleHubUsers(users);\r\n        });\r\n\r\n        socket.on('user-joined-hub', (user) => {\r\n            console.log('User joined hub:', user);\r\n            this.uiManager.showNotification(`${user.username} joined the hub`, 'info');\r\n            this.handleUserJoined(user);\r\n        });\r\n\r\n        socket.on('user-left-hub', (user) => {\r\n            console.log('User left hub:', user);\r\n            this.uiManager.showNotification(`${user.username} left the hub`, 'info');\r\n            this.handleUserLeft(user);\r\n        });\r\n\r\n        // Voice events\r\n        socket.on('offer', ({ offer, from }) => this.audioManager.handleOffer(offer, from));\r\n        socket.on('answer', ({ answer, from }) => this.audioManager.handleAnswer(answer, from));\r\n        socket.on('ice-candidate', ({ candidate, from }) => this.audioManager.handleIceCandidate(candidate, from));\r\n        \r\n        // Chat events\r\n        socket.on('chat-message', (data) => this.chatManager.addMessage(data));\r\n        \r\n        // Position events\r\n        socket.on('position-update', ({ userId, x, y }) => {\r\n            if (this.proximityMap) {\r\n                this.proximityMap.updateUserPosition(userId, x, y);\r\n            }\r\n        });\r\n    }\r\n\r\n    async joinHub() {\r\n        try {\r\n            console.log('Joining hub...');\r\n            \r\n            // Initialize audio if needed\r\n            if (!this.audioManager.isInitialized()) {\r\n                await this.audioManager.initialize();\r\n            }\r\n            \r\n            const username = this.settingsManager.get('username') || 'Anonymous';\r\n            const userColor = this.settingsManager.get('userColor') || 'purple';\r\n            \r\n            // Join the hub room\r\n            this.connectionManager.socket.emit('join-hub', {\r\n                username,\r\n                userColor\r\n            });\r\n            \r\n            this.isInHub = true;\r\n            this.currentServer = { id: 'hub', name: 'Community Hub' };\r\n            this.currentChannel = { id: 'general-voice', type: 'voice' };\r\n            \r\n            // Update UI\r\n            this.uiManager.showServerView(this.currentServer);\r\n            this.uiManager.switchToChannel('general-voice', 'voice');\r\n            \r\n            // Add self to proximity map\r\n            if (this.proximityMap) {\r\n                this.proximityMap.addUser(this.myUserId, username, true);\r\n                this.proximityMap.updateUserColor(this.myUserId, userColor);\r\n            }\r\n            \r\n            this.uiManager.showNotification('Joined Community Hub', 'success');\r\n            \r\n        } catch (error) {\r\n            console.error('Failed to join hub:', error);\r\n            this.uiManager.showNotification('Failed to join hub', 'error');\r\n        }\r\n    }\r\n\r\n    handleHubUsers(users) {\r\n        // Clear existing participants\r\n        this.uiManager.clearParticipants();\r\n        if (this.proximityMap) {\r\n            this.proximityMap.clearUsers();\r\n        }\r\n        \r\n        // Add self first\r\n        const username = this.settingsManager.get('username') || 'Anonymous';\r\n        const userColor = this.settingsManager.get('userColor') || 'purple';\r\n        \r\n        this.uiManager.addParticipant(this.myUserId, null, true, username, userColor);\r\n        if (this.proximityMap) {\r\n            this.proximityMap.addUser(this.myUserId, username, true);\r\n            this.proximityMap.updateUserColor(this.myUserId, userColor);\r\n        }\r\n        \r\n        // Add other users and establish WebRTC connections\r\n        users.forEach(user => {\r\n            if (user.userId !== this.myUserId) {\r\n                this.handleUserJoined(user);\r\n                this.audioManager.connectToUser(user.userId, user.username, user.userColor);\r\n            }\r\n        });\r\n    }\r\n\r\n    handleUserJoined(user) {\r\n        this.uiManager.addParticipant(user.userId, null, false, user.username, user.userColor);\r\n        \r\n        if (this.proximityMap) {\r\n            this.proximityMap.addUser(user.userId, user.username, false);\r\n            this.proximityMap.updateUserColor(user.userId, user.userColor);\r\n        }\r\n        \r\n        // Establish WebRTC connection if we're in the same channel\r\n        if (this.isInHub) {\r\n            this.audioManager.connectToUser(user.userId, user.username, user.userColor);\r\n        }\r\n    }\r\n\r\n    handleUserLeft(user) {\r\n        this.uiManager.removeParticipant(user.userId);\r\n        \r\n        if (this.proximityMap) {\r\n            this.proximityMap.removeUser(user.userId);\r\n        }\r\n        \r\n        this.audioManager.disconnectFromUser(user.userId);\r\n    }\r\n\r\n    handlePageChange(page) {\r\n        if (page === 'map' && this.proximityMap) {\r\n            this.proximityMap.resizeCanvas();\r\n        }\r\n        \r\n        if (page === 'settings') {\r\n            this.uiManager.populateAudioDevices();\r\n        }\r\n    }\r\n\r\n    leaveCurrentChannel() {\r\n        if (!this.isInHub) return;\r\n        \r\n        console.log('Leaving current channel...');\r\n        \r\n        // Disconnect from all users\r\n        this.audioManager.disconnectAll();\r\n        \r\n        // Clear UI\r\n        this.uiManager.clearParticipants();\r\n        if (this.proximityMap) {\r\n            this.proximityMap.clearUsers();\r\n        }\r\n        \r\n        // Leave the hub\r\n        this.connectionManager.socket.emit('leave-hub');\r\n        \r\n        this.isInHub = false;\r\n        this.currentServer = null;\r\n        this.currentChannel = null;\r\n        \r\n        // Return to home\r\n        this.uiManager.switchPage('home');\r\n        this.uiManager.showNotification('Left the channel', 'info');\r\n    }\r\n\r\n    // Public methods for other managers to use\r\n    sendPositionUpdate(x, y) {\r\n        if (this.connectionManager.socket && this.isInHub) {\r\n            this.connectionManager.socket.emit('position-update', {\r\n                roomId: 'hub-general-voice',\r\n                x, y\r\n            });\r\n        }\r\n    }\r\n\r\n    updateMicStatus(isMuted) {\r\n        if (this.connectionManager.socket && this.isInHub) {\r\n            this.connectionManager.socket.emit('mic-status', {\r\n                roomId: 'hub-general-voice',\r\n                isMuted\r\n            });\r\n        }\r\n    }\r\n}\r\n\r\n// Initialize app when DOM is ready\r\nfunction initApp() {\r\n    try {\r\n        window.proximityApp = new ProximityApp();\r\n        console.log('App initialized successfully');\r\n    } catch (error) {\r\n        console.error('Error initializing app:', error);\r\n    }\r\n}\r\n\r\nif (document.readyState === 'loading') {\r\n    document.addEventListener('DOMContentLoaded', initApp);\r\n} else {\r\n    initApp();\r\n}"],"names":[],"sourceRoot":""}
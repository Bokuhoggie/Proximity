/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/renderer/renderer.js":
/*!**********************************!*\
  !*** ./src/renderer/renderer.js ***!
  \**********************************/
/***/ (() => {

eval("// Enhanced version with mic visualizer and room management\r\nconsole.log('Enhanced Renderer.js starting...');\r\n\r\nclass AudioVisualizer {\r\n    constructor() {\r\n        this.audioContext = null;\r\n        this.analyser = null;\r\n        this.microphone = null;\r\n        this.dataArray = null;\r\n        this.isActive = false;\r\n        this.callbacks = [];\r\n    }\r\n\r\n    async initialize(stream) {\r\n        try {\r\n            this.audioContext = new (window.AudioContext || window.webkitAudioContext)();\r\n            this.analyser = this.audioContext.createAnalyser();\r\n            this.microphone = this.audioContext.createMediaStreamSource(stream);\r\n            \r\n            this.analyser.fftSize = 256;\r\n            this.analyser.smoothingTimeConstant = 0.8;\r\n            this.dataArray = new Uint8Array(this.analyser.frequencyBinCount);\r\n            \r\n            this.microphone.connect(this.analyser);\r\n            this.isActive = true;\r\n            \r\n            this.startAnalyzing();\r\n            console.log('Audio visualizer initialized');\r\n        } catch (error) {\r\n            console.error('Error initializing audio visualizer:', error);\r\n        }\r\n    }\r\n\r\n    startAnalyzing() {\r\n        if (!this.isActive) return;\r\n        \r\n        this.analyser.getByteFrequencyData(this.dataArray);\r\n        \r\n        // Calculate volume level (0-100)\r\n        const average = this.dataArray.reduce((a, b) => a + b) / this.dataArray.length;\r\n        const volume = Math.min(100, (average / 128) * 100);\r\n        \r\n        // Notify all callbacks\r\n        this.callbacks.forEach(callback => callback(volume, this.dataArray));\r\n        \r\n        requestAnimationFrame(() => this.startAnalyzing());\r\n    }\r\n\r\n    addCallback(callback) {\r\n        this.callbacks.push(callback);\r\n    }\r\n\r\n    removeCallback(callback) {\r\n        this.callbacks = this.callbacks.filter(cb => cb !== callback);\r\n    }\r\n\r\n    stop() {\r\n        this.isActive = false;\r\n        if (this.audioContext) {\r\n            this.audioContext.close();\r\n        }\r\n        this.callbacks = [];\r\n    }\r\n}\r\n\r\nclass MicrophoneInput {\r\n    constructor() {\r\n        this.stream = null;\r\n        this.visualizer = null;\r\n        this.isRecording = false;\r\n        this.constraints = {\r\n            audio: {\r\n                echoCancellation: true,\r\n                noiseSuppression: true,\r\n                autoGainControl: true\r\n            },\r\n            video: false\r\n        };\r\n    }\r\n\r\n    async initialize(constraints = {}) {\r\n        this.constraints = { ...this.constraints, ...constraints };\r\n        \r\n        try {\r\n            this.stream = await navigator.mediaDevices.getUserMedia(this.constraints);\r\n            this.visualizer = new AudioVisualizer();\r\n            await this.visualizer.initialize(this.stream);\r\n            this.isRecording = true;\r\n            console.log('Microphone input initialized');\r\n            return this.stream;\r\n        } catch (error) {\r\n            console.error('Error initializing microphone:', error);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    getStream() {\r\n        return this.stream;\r\n    }\r\n\r\n    getVisualizer() {\r\n        return this.visualizer;\r\n    }\r\n\r\n    addVolumeCallback(callback) {\r\n        if (this.visualizer) {\r\n            this.visualizer.addCallback(callback);\r\n        }\r\n    }\r\n\r\n    removeVolumeCallback(callback) {\r\n        if (this.visualizer) {\r\n            this.visualizer.removeCallback(callback);\r\n        }\r\n    }\r\n\r\n    stop() {\r\n        this.isRecording = false;\r\n        if (this.stream) {\r\n            this.stream.getTracks().forEach(track => track.stop());\r\n        }\r\n        if (this.visualizer) {\r\n            this.visualizer.stop();\r\n        }\r\n    }\r\n\r\n    async changeDevice(deviceId) {\r\n        if (this.stream) {\r\n            this.stop();\r\n        }\r\n        \r\n        const newConstraints = {\r\n            ...this.constraints,\r\n            audio: {\r\n                ...this.constraints.audio,\r\n                deviceId: { exact: deviceId }\r\n            }\r\n        };\r\n        \r\n        return await this.initialize(newConstraints);\r\n    }\r\n}\r\n\r\nclass WannabeApp {\r\n    constructor() {\r\n        console.log('WannabeApp constructor called');\r\n        this.socket = null;\r\n        this.peerConnections = {};\r\n        this.micInput = new MicrophoneInput();\r\n        this.isMuted = false;\r\n        this.isDeafened = false;\r\n        this.currentRoom = null;\r\n        this.createdRooms = []; // Track created rooms\r\n        this.settings = {\r\n            username: '',\r\n            audioGain: 50,\r\n            noiseSupression: true,\r\n            echoCancellation: true,\r\n            autoJoin: false,\r\n            muteHotkey: 'Ctrl+M',\r\n            deafenHotkey: 'Ctrl+D'\r\n        };\r\n\r\n        this.initializeUI();\r\n        this.setupEventListeners();\r\n        this.loadSettings();\r\n        this.setupMicrophoneGlow();\r\n        console.log('WannabeApp initialized');\r\n    }\r\n\r\n    initializeUI() {\r\n        console.log('Initializing UI...');\r\n        \r\n        // Navigation elements\r\n        this.navItems = document.querySelectorAll('.nav-item');\r\n        this.pages = document.querySelectorAll('.page');\r\n\r\n        // Room elements\r\n        this.roomIdInput = document.getElementById('roomId');\r\n        this.joinRoomBtn = document.getElementById('joinRoom');\r\n        this.leaveRoomBtn = document.getElementById('leaveRoom');\r\n        this.muteButton = document.getElementById('muteButton');\r\n        this.participantsList = document.getElementById('participantsList');\r\n        this.roomCodeElement = document.getElementById('roomCode');\r\n        this.newRoomBtn = document.getElementById('newRoomBtn');\r\n        this.currentRoomSection = document.getElementById('currentRoom');\r\n\r\n        // Settings elements\r\n        this.audioDeviceSelect = document.getElementById('audioDevice');\r\n        this.audioGainSlider = document.getElementById('audioGain');\r\n        this.noiseSupressionCheck = document.getElementById('noiseSupression');\r\n        this.echoCancellationCheck = document.getElementById('echoCancellation');\r\n        this.usernameInput = document.getElementById('username');\r\n        this.autoJoinCheck = document.getElementById('autoJoin');\r\n        this.testMicrophoneBtn = document.getElementById('testMicrophone');\r\n        this.resetSettingsBtn = document.getElementById('resetSettings');\r\n        \r\n        // Create mic test visualizer\r\n        this.createMicTestVisualizer();\r\n        \r\n        // Create created rooms container\r\n        this.createCreatedRoomsContainer();\r\n        \r\n        console.log('UI elements found:', {\r\n            navItems: this.navItems.length,\r\n            joinBtn: !!this.joinRoomBtn,\r\n            newRoomBtn: !!this.newRoomBtn\r\n        });\r\n    }\r\n\r\n    createMicTestVisualizer() {\r\n        // Find the test microphone button and add visualizer after it\r\n        const testMicContainer = this.testMicrophoneBtn.parentElement;\r\n        \r\n        const visualizerContainer = document.createElement('div');\r\n        visualizerContainer.id = 'micTestVisualizer';\r\n        visualizerContainer.style.cssText = `\r\n            margin-top: 1rem;\r\n            padding: 1rem;\r\n            background: var(--dark-bg);\r\n            border-radius: 8px;\r\n            border: 1px solid var(--border);\r\n            display: none;\r\n        `;\r\n        \r\n        const visualizerTitle = document.createElement('h4');\r\n        visualizerTitle.textContent = 'Microphone Level';\r\n        visualizerTitle.style.cssText = `\r\n            color: var(--text-secondary);\r\n            margin-bottom: 0.5rem;\r\n            font-size: 0.9rem;\r\n        `;\r\n        \r\n        const visualizerBar = document.createElement('div');\r\n        visualizerBar.id = 'micLevelBar';\r\n        visualizerBar.style.cssText = `\r\n            width: 100%;\r\n            height: 20px;\r\n            background: var(--border);\r\n            border-radius: 10px;\r\n            overflow: hidden;\r\n            position: relative;\r\n        `;\r\n        \r\n        const visualizerFill = document.createElement('div');\r\n        visualizerFill.id = 'micLevelFill';\r\n        visualizerFill.style.cssText = `\r\n            height: 100%;\r\n            width: 0%;\r\n            background: linear-gradient(90deg, var(--success) 0%, var(--warning) 70%, var(--danger) 100%);\r\n            transition: width 0.1s ease;\r\n            border-radius: 10px;\r\n        `;\r\n        \r\n        const volumeText = document.createElement('span');\r\n        volumeText.id = 'volumeLevel';\r\n        volumeText.style.cssText = `\r\n            position: absolute;\r\n            top: 50%;\r\n            left: 50%;\r\n            transform: translate(-50%, -50%);\r\n            font-size: 0.8rem;\r\n            font-weight: bold;\r\n            color: var(--text-primary);\r\n            text-shadow: 1px 1px 2px rgba(0,0,0,0.5);\r\n        `;\r\n        volumeText.textContent = '0%';\r\n        \r\n        visualizerBar.appendChild(visualizerFill);\r\n        visualizerBar.appendChild(volumeText);\r\n        visualizerContainer.appendChild(visualizerTitle);\r\n        visualizerContainer.appendChild(visualizerBar);\r\n        \r\n        testMicContainer.appendChild(visualizerContainer);\r\n    }\r\n\r\n    createCreatedRoomsContainer() {\r\n        // Find the room controls and add created rooms container after it\r\n        const roomControls = document.querySelector('.room-controls');\r\n        \r\n        const createdRoomsContainer = document.createElement('div');\r\n        createdRoomsContainer.id = 'createdRoomsContainer';\r\n        createdRoomsContainer.style.cssText = `\r\n            margin-top: 1rem;\r\n            display: none;\r\n        `;\r\n        \r\n        const createdRoomsTitle = document.createElement('h3');\r\n        createdRoomsTitle.textContent = 'Your Created Rooms';\r\n        createdRoomsTitle.style.cssText = `\r\n            color: var(--text-secondary);\r\n            margin-bottom: 1rem;\r\n            font-size: 1.1rem;\r\n        `;\r\n        \r\n        const roomsList = document.createElement('div');\r\n        roomsList.id = 'createdRoomsList';\r\n        roomsList.style.cssText = `\r\n            display: flex;\r\n            flex-direction: column;\r\n            gap: 0.75rem;\r\n        `;\r\n        \r\n        createdRoomsContainer.appendChild(createdRoomsTitle);\r\n        createdRoomsContainer.appendChild(roomsList);\r\n        \r\n        roomControls.parentNode.insertBefore(createdRoomsContainer, roomControls.nextSibling);\r\n    }\r\n\r\n    setupMicrophoneGlow() {\r\n        // Add glow styles to document\r\n        const style = document.createElement('style');\r\n        style.textContent = `\r\n            .mic-status.glowing {\r\n                box-shadow: 0 0 var(--glow-size, 8px) var(--glow-color, rgba(16, 185, 129, 0.6));\r\n                transition: box-shadow 0.1s ease;\r\n            }\r\n            \r\n            .participant {\r\n                position: relative;\r\n            }\r\n        `;\r\n        document.head.appendChild(style);\r\n    }\r\n\r\n    setupEventListeners() {\r\n        console.log('Setting up event listeners...');\r\n        \r\n        // Navigation\r\n        this.navItems.forEach((item, index) => {\r\n            console.log(`Adding click listener to nav item ${index}:`, item.dataset.page);\r\n            item.addEventListener('click', (e) => {\r\n                console.log('Nav item clicked:', item.dataset.page);\r\n                const page = item.dataset.page;\r\n                this.switchPage(page);\r\n            });\r\n        });\r\n\r\n        // Room controls\r\n        if (this.joinRoomBtn) {\r\n            this.joinRoomBtn.addEventListener('click', () => {\r\n                console.log('Join room button clicked');\r\n                this.joinRoom();\r\n            });\r\n        }\r\n        \r\n        if (this.leaveRoomBtn) {\r\n            this.leaveRoomBtn.addEventListener('click', () => {\r\n                console.log('Leave room button clicked');\r\n                this.leaveRoom();\r\n            });\r\n        }\r\n        \r\n        if (this.muteButton) {\r\n            this.muteButton.addEventListener('click', () => {\r\n                console.log('Mute button clicked');\r\n                this.toggleMute();\r\n            });\r\n        }\r\n        \r\n        if (this.newRoomBtn) {\r\n            this.newRoomBtn.addEventListener('click', () => {\r\n                console.log('New room button clicked');\r\n                this.createNewRoom();\r\n            });\r\n        }\r\n\r\n        // Allow Enter key to join room\r\n        if (this.roomIdInput) {\r\n            this.roomIdInput.addEventListener('keypress', (e) => {\r\n                if (e.key === 'Enter' && !this.joinRoomBtn.disabled) {\r\n                    this.joinRoom();\r\n                }\r\n            });\r\n        }\r\n\r\n        // Settings controls\r\n        if (this.audioDeviceSelect) {\r\n            this.audioDeviceSelect.addEventListener('change', (e) => this.changeAudioDevice(e.target.value));\r\n        }\r\n        \r\n        if (this.audioGainSlider) {\r\n            this.audioGainSlider.addEventListener('input', (e) => {\r\n                this.updateAudioGain(e.target.value);\r\n                const valueDisplay = document.querySelector('.slider-value');\r\n                if (valueDisplay) {\r\n                    valueDisplay.textContent = `${e.target.value}%`;\r\n                }\r\n            });\r\n        }\r\n        \r\n        if (this.testMicrophoneBtn) {\r\n            this.testMicrophoneBtn.addEventListener('click', () => this.testMicrophone());\r\n        }\r\n        \r\n        if (this.resetSettingsBtn) {\r\n            this.resetSettingsBtn.addEventListener('click', () => this.resetSettings());\r\n        }\r\n\r\n        console.log('Event listeners set up complete');\r\n    }\r\n\r\n    switchPage(pageName) {\r\n        console.log('Switching to page:', pageName);\r\n        \r\n        // Update navigation\r\n        this.navItems.forEach(item => {\r\n            item.classList.toggle('active', item.dataset.page === pageName);\r\n        });\r\n\r\n        // Update pages\r\n        this.pages.forEach(page => {\r\n            page.classList.toggle('active', page.id === `${pageName}-page`);\r\n        });\r\n\r\n        // Initialize audio devices when switching to settings\r\n        if (pageName === 'settings') {\r\n            this.populateAudioDevices();\r\n        }\r\n    }\r\n\r\n    loadSettings() {\r\n        // Load settings from localStorage or use defaults\r\n        try {\r\n            const savedSettings = localStorage.getItem('wannabe-settings');\r\n            if (savedSettings) {\r\n                this.settings = { ...this.settings, ...JSON.parse(savedSettings) };\r\n            }\r\n        } catch (error) {\r\n            console.error('Error loading settings:', error);\r\n        }\r\n\r\n        // Apply settings to UI\r\n        if (this.usernameInput) this.usernameInput.value = this.settings.username;\r\n        if (this.audioGainSlider) this.audioGainSlider.value = this.settings.audioGain;\r\n        if (this.noiseSupressionCheck) this.noiseSupressionCheck.checked = this.settings.noiseSupression;\r\n        if (this.echoCancellationCheck) this.echoCancellationCheck.checked = this.settings.echoCancellation;\r\n        if (this.autoJoinCheck) this.autoJoinCheck.checked = this.settings.autoJoin;\r\n\r\n        // Update slider display\r\n        const valueDisplay = document.querySelector('.slider-value');\r\n        if (valueDisplay) {\r\n            valueDisplay.textContent = `${this.settings.audioGain}%`;\r\n        }\r\n    }\r\n\r\n    saveSettings() {\r\n        try {\r\n            localStorage.setItem('wannabe-settings', JSON.stringify(this.settings));\r\n        } catch (error) {\r\n            console.error('Error saving settings:', error);\r\n        }\r\n    }\r\n\r\n    generateRoomCode() {\r\n        return Math.random().toString(36).substring(2, 8).toUpperCase();\r\n    }\r\n\r\n    createNewRoom() {\r\n        console.log('Creating new room...');\r\n        const roomCode = this.generateRoomCode();\r\n        \r\n        // Add to created rooms list\r\n        this.createdRooms.push({\r\n            code: roomCode,\r\n            created: new Date(),\r\n            participants: 0\r\n        });\r\n        \r\n        this.updateCreatedRoomsList();\r\n        this.showNotification(`New room created: ${roomCode}`, 'success');\r\n    }\r\n\r\n    updateCreatedRoomsList() {\r\n        const container = document.getElementById('createdRoomsContainer');\r\n        const list = document.getElementById('createdRoomsList');\r\n        \r\n        if (!container || !list) return;\r\n        \r\n        // Show container if we have rooms\r\n        container.style.display = this.createdRooms.length > 0 ? 'block' : 'none';\r\n        \r\n        // Clear existing rooms\r\n        list.innerHTML = '';\r\n        \r\n        // Add each room\r\n        this.createdRooms.forEach((room, index) => {\r\n            const roomCard = document.createElement('div');\r\n            roomCard.style.cssText = `\r\n                background: var(--card-bg);\r\n                border: 1px solid var(--border);\r\n                border-radius: 8px;\r\n                padding: 1rem;\r\n                display: flex;\r\n                justify-content: space-between;\r\n                align-items: center;\r\n            `;\r\n            \r\n            const roomInfo = document.createElement('div');\r\n            roomInfo.innerHTML = `\r\n                <div style=\"color: var(--text-primary); font-weight: 600; margin-bottom: 0.25rem;\">\r\n                    Room: ${room.code}\r\n                </div>\r\n                <div style=\"color: var(--text-muted); font-size: 0.8rem;\">\r\n                    Created: ${room.created.toLocaleTimeString()} • ${room.participants} participants\r\n                </div>\r\n            `;\r\n            \r\n            const roomActions = document.createElement('div');\r\n            roomActions.style.cssText = 'display: flex; gap: 0.5rem;';\r\n            \r\n            const joinBtn = document.createElement('button');\r\n            joinBtn.className = 'btn primary';\r\n            joinBtn.style.cssText = 'padding: 0.5rem 1rem; font-size: 0.9rem;';\r\n            joinBtn.textContent = 'Join';\r\n            joinBtn.onclick = () => {\r\n                this.roomIdInput.value = room.code;\r\n                this.joinRoom();\r\n            };\r\n            \r\n            const deleteBtn = document.createElement('button');\r\n            deleteBtn.className = 'btn danger';\r\n            deleteBtn.style.cssText = 'padding: 0.5rem 1rem; font-size: 0.9rem;';\r\n            deleteBtn.textContent = 'Delete';\r\n            deleteBtn.onclick = () => {\r\n                this.deleteCreatedRoom(index);\r\n            };\r\n            \r\n            roomActions.appendChild(joinBtn);\r\n            roomActions.appendChild(deleteBtn);\r\n            \r\n            roomCard.appendChild(roomInfo);\r\n            roomCard.appendChild(roomActions);\r\n            \r\n            list.appendChild(roomCard);\r\n        });\r\n    }\r\n\r\n    deleteCreatedRoom(index) {\r\n        if (confirm('Are you sure you want to delete this room?')) {\r\n            this.createdRooms.splice(index, 1);\r\n            this.updateCreatedRoomsList();\r\n            this.showNotification('Room deleted', 'info');\r\n        }\r\n    }\r\n\r\n    async joinRoom() {\r\n        const roomId = this.roomIdInput.value.trim();\r\n        if (!roomId) {\r\n            this.showNotification('Please enter a room ID', 'warning');\r\n            return;\r\n        }\r\n\r\n        console.log('Attempting to join room:', roomId);\r\n        \r\n        try {\r\n            // Initialize microphone input\r\n            await this.initializeMedia();\r\n            \r\n            this.currentRoom = roomId;\r\n            \r\n            // Update UI\r\n            this.joinRoomBtn.disabled = true;\r\n            this.roomIdInput.disabled = true;\r\n            this.newRoomBtn.disabled = true;\r\n            this.currentRoomSection.style.display = 'block';\r\n            this.roomCodeElement.textContent = roomId;\r\n            \r\n            this.showNotification(`Joined room: ${roomId}`, 'success');\r\n            \r\n        } catch (error) {\r\n            console.error('Error joining room:', error);\r\n            this.showNotification('Failed to join room. Check microphone permissions.', 'error');\r\n        }\r\n    }\r\n\r\n    async initializeMedia() {\r\n        try {\r\n            console.log('Requesting microphone access...');\r\n            const constraints = {\r\n                audio: {\r\n                    echoCancellation: this.settings.echoCancellation,\r\n                    noiseSuppression: this.settings.noiseSupression,\r\n                    autoGainControl: true\r\n                }\r\n            };\r\n\r\n            await this.micInput.initialize(constraints);\r\n            console.log('Microphone access granted');\r\n            \r\n            await this.populateAudioDevices();\r\n            this.addParticipant('self', this.micInput.getStream(), true);\r\n            \r\n            // Setup microphone glow callback\r\n            this.micInput.addVolumeCallback((volume, frequencyData) => {\r\n                this.updateMicrophoneGlow('self', volume);\r\n            });\r\n            \r\n        } catch (error) {\r\n            console.error('Error accessing media devices:', error);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    updateMicrophoneGlow(userId, volume) {\r\n        const participant = document.getElementById(`participant-${userId}`);\r\n        if (participant) {\r\n            const micStatus = participant.querySelector('.mic-status');\r\n            if (micStatus && !this.isMuted) {\r\n                // Calculate glow intensity based on volume\r\n                const intensity = Math.min(volume / 50, 1); // Normalize to 0-1\r\n                const glowSize = 4 + (intensity * 12); // 4px to 16px\r\n                const glowOpacity = 0.3 + (intensity * 0.5); // 0.3 to 0.8\r\n                \r\n                micStatus.style.setProperty('--glow-size', `${glowSize}px`);\r\n                micStatus.style.setProperty('--glow-color', `rgba(16, 185, 129, ${glowOpacity})`);\r\n                micStatus.classList.add('glowing');\r\n                \r\n                // Remove glow if volume is very low\r\n                if (volume < 5) {\r\n                    micStatus.classList.remove('glowing');\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    async populateAudioDevices() {\r\n        try {\r\n            const devices = await navigator.mediaDevices.enumerateDevices();\r\n            const audioInputs = devices.filter(device => device.kind === 'audioinput');\r\n            \r\n            console.log('Audio devices found:', audioInputs.length);\r\n            \r\n            // Clear existing options except the first placeholder\r\n            this.audioDeviceSelect.innerHTML = '<option value=\"\">Select Audio Device</option>';\r\n            \r\n            audioInputs.forEach((device, index) => {\r\n                const option = document.createElement('option');\r\n                option.value = device.deviceId;\r\n                option.textContent = device.label || `Microphone ${index + 1}`;\r\n                this.audioDeviceSelect.appendChild(option);\r\n            });\r\n\r\n            // Set current device as selected if we have a stream\r\n            if (this.micInput.getStream()) {\r\n                const currentTrack = this.micInput.getStream().getAudioTracks()[0];\r\n                if (currentTrack && currentTrack.getSettings) {\r\n                    const currentDeviceId = currentTrack.getSettings().deviceId;\r\n                    this.audioDeviceSelect.value = currentDeviceId;\r\n                }\r\n            }\r\n        } catch (error) {\r\n            console.error('Error populating audio devices:', error);\r\n        }\r\n    }\r\n\r\n    addParticipant(userId, stream, isSelf = false) {\r\n        // Check if participant already exists\r\n        const existingParticipant = document.getElementById(`participant-${userId}`);\r\n        if (existingParticipant) {\r\n            return;\r\n        }\r\n\r\n        const participant = document.createElement('div');\r\n        participant.className = 'participant';\r\n        participant.id = `participant-${userId}`;\r\n        \r\n        const micStatus = document.createElement('div');\r\n        micStatus.className = 'mic-status';\r\n        micStatus.classList.add(this.isMuted && isSelf ? 'muted' : 'active');\r\n        \r\n        const name = document.createElement('span');\r\n        const displayName = isSelf ? \r\n            (this.settings.username || 'You') : \r\n            `User ${userId.slice(0, 4)}`;\r\n        name.textContent = displayName;\r\n        \r\n        participant.appendChild(micStatus);\r\n        participant.appendChild(name);\r\n        \r\n        this.participantsList.appendChild(participant);\r\n    }\r\n\r\n    async leaveRoom() {\r\n        console.log('Leaving room...');\r\n        \r\n        this.micInput.stop();\r\n\r\n        this.participantsList.innerHTML = '';\r\n        this.currentRoom = null;\r\n        this.isMuted = false;\r\n        this.isDeafened = false;\r\n        \r\n        // Reset UI\r\n        this.joinRoomBtn.disabled = false;\r\n        this.roomIdInput.disabled = false;\r\n        this.newRoomBtn.disabled = false;\r\n        this.currentRoomSection.style.display = 'none';\r\n        if (this.muteButton) {\r\n            this.muteButton.querySelector('.text').textContent = 'Mute';\r\n            this.muteButton.classList.remove('muted');\r\n        }\r\n        \r\n        this.showNotification('Left the room', 'info');\r\n    }\r\n\r\n    toggleMute() {\r\n        if (this.micInput.getStream()) {\r\n            this.isMuted = !this.isMuted;\r\n            this.micInput.getStream().getAudioTracks().forEach(track => {\r\n                track.enabled = !this.isMuted;\r\n            });\r\n            \r\n            const button = this.muteButton;\r\n            button.querySelector('.text').textContent = this.isMuted ? 'Unmute' : 'Mute';\r\n            button.querySelector('.icon').textContent = this.isMuted ? '🔇' : '🎤';\r\n            button.classList.toggle('muted', this.isMuted);\r\n            \r\n            this.updateMicStatus('self', this.isMuted);\r\n            \r\n            // Remove glow when muted\r\n            if (this.isMuted) {\r\n                const micStatus = document.querySelector('#participant-self .mic-status');\r\n                if (micStatus) {\r\n                    micStatus.classList.remove('glowing');\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    updateMicStatus(userId, isMuted) {\r\n        const participant = document.getElementById(`participant-${userId}`);\r\n        if (participant) {\r\n            const micStatus = participant.querySelector('.mic-status');\r\n            micStatus.classList.toggle('muted', isMuted);\r\n            micStatus.classList.toggle('active', !isMuted);\r\n        }\r\n    }\r\n\r\n    async changeAudioDevice(deviceId) {\r\n        if (!deviceId || !this.micInput.getStream()) {\r\n            return;\r\n        }\r\n\r\n        try {\r\n            await this.micInput.changeDevice(deviceId);\r\n            \r\n            // Re-setup glow callback for new stream\r\n            this.micInput.addVolumeCallback((volume, frequencyData) => {\r\n                this.updateMicrophoneGlow('self', volume);\r\n            });\r\n            \r\n            this.showNotification('Audio device changed successfully', 'success');\r\n        } catch (error) {\r\n            console.error('Error changing audio device:', error);\r\n            this.showNotification('Failed to change audio device', 'error');\r\n        }\r\n    }\r\n\r\n    updateAudioGain(value) {\r\n        this.settings.audioGain = parseInt(value);\r\n        this.saveSettings();\r\n    }\r\n\r\n    async testMicrophone() {\r\n        try {\r\n            const visualizerContainer = document.getElementById('micTestVisualizer');\r\n            const volumeText = document.getElementById('volumeLevel');\r\n            const levelFill = document.getElementById('micLevelFill');\r\n            \r\n            if (!this.micInput.getStream()) {\r\n                await this.initializeMedia();\r\n            }\r\n            \r\n            // Show visualizer\r\n            visualizerContainer.style.display = 'block';\r\n            this.showNotification('Microphone test - speak now!', 'info');\r\n            \r\n            let testCallback = (volume, frequencyData) => {\r\n                // Update volume bar\r\n                levelFill.style.width = `${volume}%`;\r\n                volumeText.textContent = `${Math.round(volume)}%`;\r\n            };\r\n            \r\n            this.micInput.addVolumeCallback(testCallback);\r\n            \r\n            // Stop test after 10 seconds\r\n            setTimeout(() => {\r\n                this.micInput.removeVolumeCallback(testCallback);\r\n                visualizerContainer.style.display = 'none';\r\n                this.showNotification('Microphone test complete! 🎤', 'success');\r\n            }, 10000);\r\n            \r\n        } catch (error) {\r\n            console.error('Error testing microphone:', error);\r\n            this.showNotification('Failed to test microphone', 'error');\r\n        }\r\n    }\r\n\r\n    resetSettings() {\r\n        if (confirm('Are you sure you want to reset all settings to defaults?')) {\r\n            localStorage.removeItem('wannabe-settings');\r\n            this.settings = {\r\n                username: '',\r\n                audioGain: 50,\r\n                noiseSupression: true,\r\n                echoCancellation: true,\r\n                autoJoin: false,\r\n                muteHotkey: 'Ctrl+M',\r\n                deafenHotkey: 'Ctrl+D'\r\n            };\r\n            this.loadSettings();\r\n            this.showNotification('Settings reset to defaults', 'success');\r\n        }\r\n    }\r\n\r\n    showNotification(message, type = 'info') {\r\n        console.log(`Notification [${type}]: ${message}`);\r\n        \r\n        // Create notification element\r\n        const notification = document.createElement('div');\r\n        notification.className = `notification ${type}`;\r\n        notification.textContent = message;\r\n        \r\n        // Style the notification\r\n        Object.assign(notification.style, {\r\n            position: 'fixed',\r\n            top: '20px',\r\n            right: '20px',\r\n            padding: '12px 20px',\r\n            borderRadius: '8px',\r\n            color: 'white',\r\n            fontWeight: '500',\r\n            zIndex: '9999',\r\n            opacity: '0',\r\n            transform: 'translateX(100%)',\r\n            transition: 'all 0.3s ease'\r\n        });\r\n        \r\n        // Set background color based on type\r\n        const colors = {\r\n            success: '#10b981',\r\n            error: '#ef4444',\r\n            warning: '#f59e0b',\r\n            info: '#6b46c1'\r\n        };\r\n        notification.style.backgroundColor = colors[type] || colors.info;\r\n        \r\n        document.body.appendChild(notification);\r\n        \r\n        // Animate in\r\n        setTimeout(() => {\r\n            notification.style.opacity = '1';\r\n            notification.style.transform = 'translateX(0)';\r\n        }, 10);\r\n        \r\n        // Remove after 3 seconds\r\n        setTimeout(() => {\r\n            notification.style.opacity = '0';\r\n            notification.style.transform = 'translateX(100%)';\r\n            setTimeout(() => {\r\n                if (notification.parentNode) {\r\n                    document.body.removeChild(notification);\r\n                }\r\n            }, 300);\r\n        }, 3000);\r\n    }\r\n}\r\n\r\n// Initialize the application when the DOM is loaded\r\nconsole.log('Setting up DOMContentLoaded listener...');\r\n\r\nfunction initApp() {\r\n    console.log('DOM ready, initializing app...');\r\n    try {\r\n        window.wannabeApp = new WannabeApp();\r\n        console.log('App initialized successfully');\r\n    } catch (error) {\r\n        console.error('Error initializing app:', error);\r\n    }\r\n}\r\n\r\nif (document.readyState === 'loading') {\r\n    document.addEventListener('DOMContentLoaded', initApp);\r\n} else {\r\n    initApp();\r\n}\n\n//# sourceURL=webpack://wannabe/./src/renderer/renderer.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/renderer/renderer.js"]();
/******/ 	
/******/ })()
;